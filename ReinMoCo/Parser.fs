// Implementation file for parser generated by fsyacc
module Microsoft.Research.REINMoCo.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

module Settings = Microsoft.Research.REIN.Settings
open System
open Microsoft.Research.ReasoningEngine.Constraint
open Microsoft.Research.ReasoningEngine.Var
open System.Collections.Generic




type Line = 
    | Assign of string * BExpr
    | Assert of BExpr  * string option     //boolean expression * description    option
    | Interaction of string * string * bool * bool //source * target * positive? * definite?
    | Species of string * int list option * bool * bool * bool //name * allowed logics * KO? * FE? * must be activated
    | Directive of Directive //possibly, create more structured directives
    | Motif of string * ((string * string * bool * bool) list)
    
and Directive = 
    |Uniqueness           of Settings.Uniqueness
    |Interaction_limit of int option
    |Regulation           of Settings.RegulationConditions
    |Traj_length       of int
    |Updates           of Settings.Updates        
    |PreventRepeats

# 33 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | FIXPOINT
  | INTERACTIONS
  | FULL
  | PATHS
  | DEFAULT
  | CARDINALITY
  | LEGACY
  | NOTHRESHOLDS
  | SYNC
  | ASYNC
  | DIRECTIVE
  | UNIQUENESS
  | LIMIT
  | REGULATION
  | LENGTH
  | UPDATES
  | UPATH
  | PREVENTREPEATS
  | EOF
  | EOL
  | KOTU
  | FETU
  | KOT
  | FET
  | POS
  | NEG
  | OPT
  | TO
  | COMMA
  | PLUS
  | MINUS
  | EXCL
  | SAT
  | IMPLIES
  | EQ
  | AND
  | OR
  | TRUE
  | FALSE
  | NOT
  | AT
  | LPAREN
  | RPAREN
  | LCBRA
  | RCBRA
  | LSBRA
  | RSBRA
  | DOT
  | LET
  | ASSIGN
  | UNDER
  | DESCRIPTION of (System.String)
  | PATH of (System.String)
  | NAME of (System.String)
  | SPECIES of (System.String)
  | BOOL of (System.Boolean)
  | INT32 of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_FIXPOINT
    | TOKEN_INTERACTIONS
    | TOKEN_FULL
    | TOKEN_PATHS
    | TOKEN_DEFAULT
    | TOKEN_CARDINALITY
    | TOKEN_LEGACY
    | TOKEN_NOTHRESHOLDS
    | TOKEN_SYNC
    | TOKEN_ASYNC
    | TOKEN_DIRECTIVE
    | TOKEN_UNIQUENESS
    | TOKEN_LIMIT
    | TOKEN_REGULATION
    | TOKEN_LENGTH
    | TOKEN_UPDATES
    | TOKEN_UPATH
    | TOKEN_PREVENTREPEATS
    | TOKEN_EOF
    | TOKEN_EOL
    | TOKEN_KOTU
    | TOKEN_FETU
    | TOKEN_KOT
    | TOKEN_FET
    | TOKEN_POS
    | TOKEN_NEG
    | TOKEN_OPT
    | TOKEN_TO
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_EXCL
    | TOKEN_SAT
    | TOKEN_IMPLIES
    | TOKEN_EQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_AT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCBRA
    | TOKEN_RCBRA
    | TOKEN_LSBRA
    | TOKEN_RSBRA
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_ASSIGN
    | TOKEN_UNDER
    | TOKEN_DESCRIPTION
    | TOKEN_PATH
    | TOKEN_NAME
    | TOKEN_SPECIES
    | TOKEN_BOOL
    | TOKEN_INT32
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Lines
    | NONTERM_Line
    | NONTERM_Directive
    | NONTERM_Species
    | NONTERM_Interaction
    | NONTERM_BExpr
    | NONTERM_BTerm
    | NONTERM_Predicate
    | NONTERM_Interactions
    | NONTERM_Ints

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | FIXPOINT  -> 0 
  | INTERACTIONS  -> 1 
  | FULL  -> 2 
  | PATHS  -> 3 
  | DEFAULT  -> 4 
  | CARDINALITY  -> 5 
  | LEGACY  -> 6 
  | NOTHRESHOLDS  -> 7 
  | SYNC  -> 8 
  | ASYNC  -> 9 
  | DIRECTIVE  -> 10 
  | UNIQUENESS  -> 11 
  | LIMIT  -> 12 
  | REGULATION  -> 13 
  | LENGTH  -> 14 
  | UPDATES  -> 15 
  | UPATH  -> 16 
  | PREVENTREPEATS  -> 17 
  | EOF  -> 18 
  | EOL  -> 19 
  | KOTU  -> 20 
  | FETU  -> 21 
  | KOT  -> 22 
  | FET  -> 23 
  | POS  -> 24 
  | NEG  -> 25 
  | OPT  -> 26 
  | TO  -> 27 
  | COMMA  -> 28 
  | PLUS  -> 29 
  | MINUS  -> 30 
  | EXCL  -> 31 
  | SAT  -> 32 
  | IMPLIES  -> 33 
  | EQ  -> 34 
  | AND  -> 35 
  | OR  -> 36 
  | TRUE  -> 37 
  | FALSE  -> 38 
  | NOT  -> 39 
  | AT  -> 40 
  | LPAREN  -> 41 
  | RPAREN  -> 42 
  | LCBRA  -> 43 
  | RCBRA  -> 44 
  | LSBRA  -> 45 
  | RSBRA  -> 46 
  | DOT  -> 47 
  | LET  -> 48 
  | ASSIGN  -> 49 
  | UNDER  -> 50 
  | DESCRIPTION _ -> 51 
  | PATH _ -> 52 
  | NAME _ -> 53 
  | SPECIES _ -> 54 
  | BOOL _ -> 55 
  | INT32 _ -> 56 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_FIXPOINT 
  | 1 -> TOKEN_INTERACTIONS 
  | 2 -> TOKEN_FULL 
  | 3 -> TOKEN_PATHS 
  | 4 -> TOKEN_DEFAULT 
  | 5 -> TOKEN_CARDINALITY 
  | 6 -> TOKEN_LEGACY 
  | 7 -> TOKEN_NOTHRESHOLDS 
  | 8 -> TOKEN_SYNC 
  | 9 -> TOKEN_ASYNC 
  | 10 -> TOKEN_DIRECTIVE 
  | 11 -> TOKEN_UNIQUENESS 
  | 12 -> TOKEN_LIMIT 
  | 13 -> TOKEN_REGULATION 
  | 14 -> TOKEN_LENGTH 
  | 15 -> TOKEN_UPDATES 
  | 16 -> TOKEN_UPATH 
  | 17 -> TOKEN_PREVENTREPEATS 
  | 18 -> TOKEN_EOF 
  | 19 -> TOKEN_EOL 
  | 20 -> TOKEN_KOTU 
  | 21 -> TOKEN_FETU 
  | 22 -> TOKEN_KOT 
  | 23 -> TOKEN_FET 
  | 24 -> TOKEN_POS 
  | 25 -> TOKEN_NEG 
  | 26 -> TOKEN_OPT 
  | 27 -> TOKEN_TO 
  | 28 -> TOKEN_COMMA 
  | 29 -> TOKEN_PLUS 
  | 30 -> TOKEN_MINUS 
  | 31 -> TOKEN_EXCL 
  | 32 -> TOKEN_SAT 
  | 33 -> TOKEN_IMPLIES 
  | 34 -> TOKEN_EQ 
  | 35 -> TOKEN_AND 
  | 36 -> TOKEN_OR 
  | 37 -> TOKEN_TRUE 
  | 38 -> TOKEN_FALSE 
  | 39 -> TOKEN_NOT 
  | 40 -> TOKEN_AT 
  | 41 -> TOKEN_LPAREN 
  | 42 -> TOKEN_RPAREN 
  | 43 -> TOKEN_LCBRA 
  | 44 -> TOKEN_RCBRA 
  | 45 -> TOKEN_LSBRA 
  | 46 -> TOKEN_RSBRA 
  | 47 -> TOKEN_DOT 
  | 48 -> TOKEN_LET 
  | 49 -> TOKEN_ASSIGN 
  | 50 -> TOKEN_UNDER 
  | 51 -> TOKEN_DESCRIPTION 
  | 52 -> TOKEN_PATH 
  | 53 -> TOKEN_NAME 
  | 54 -> TOKEN_SPECIES 
  | 55 -> TOKEN_BOOL 
  | 56 -> TOKEN_INT32 
  | 59 -> TOKEN_end_of_input
  | 57 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Lines 
    | 3 -> NONTERM_Lines 
    | 4 -> NONTERM_Line 
    | 5 -> NONTERM_Line 
    | 6 -> NONTERM_Line 
    | 7 -> NONTERM_Line 
    | 8 -> NONTERM_Line 
    | 9 -> NONTERM_Line 
    | 10 -> NONTERM_Line 
    | 11 -> NONTERM_Directive 
    | 12 -> NONTERM_Directive 
    | 13 -> NONTERM_Directive 
    | 14 -> NONTERM_Directive 
    | 15 -> NONTERM_Directive 
    | 16 -> NONTERM_Directive 
    | 17 -> NONTERM_Directive 
    | 18 -> NONTERM_Directive 
    | 19 -> NONTERM_Directive 
    | 20 -> NONTERM_Directive 
    | 21 -> NONTERM_Directive 
    | 22 -> NONTERM_Directive 
    | 23 -> NONTERM_Directive 
    | 24 -> NONTERM_Species 
    | 25 -> NONTERM_Species 
    | 26 -> NONTERM_Species 
    | 27 -> NONTERM_Species 
    | 28 -> NONTERM_Species 
    | 29 -> NONTERM_Species 
    | 30 -> NONTERM_Species 
    | 31 -> NONTERM_Species 
    | 32 -> NONTERM_Species 
    | 33 -> NONTERM_Species 
    | 34 -> NONTERM_Species 
    | 35 -> NONTERM_Species 
    | 36 -> NONTERM_Species 
    | 37 -> NONTERM_Species 
    | 38 -> NONTERM_Species 
    | 39 -> NONTERM_Species 
    | 40 -> NONTERM_Species 
    | 41 -> NONTERM_Species 
    | 42 -> NONTERM_Species 
    | 43 -> NONTERM_Species 
    | 44 -> NONTERM_Species 
    | 45 -> NONTERM_Species 
    | 46 -> NONTERM_Species 
    | 47 -> NONTERM_Species 
    | 48 -> NONTERM_Species 
    | 49 -> NONTERM_Species 
    | 50 -> NONTERM_Species 
    | 51 -> NONTERM_Species 
    | 52 -> NONTERM_Species 
    | 53 -> NONTERM_Species 
    | 54 -> NONTERM_Species 
    | 55 -> NONTERM_Species 
    | 56 -> NONTERM_Interaction 
    | 57 -> NONTERM_Interaction 
    | 58 -> NONTERM_Interaction 
    | 59 -> NONTERM_Interaction 
    | 60 -> NONTERM_BExpr 
    | 61 -> NONTERM_BExpr 
    | 62 -> NONTERM_BExpr 
    | 63 -> NONTERM_BExpr 
    | 64 -> NONTERM_BExpr 
    | 65 -> NONTERM_BExpr 
    | 66 -> NONTERM_BExpr 
    | 67 -> NONTERM_BTerm 
    | 68 -> NONTERM_BTerm 
    | 69 -> NONTERM_BTerm 
    | 70 -> NONTERM_BTerm 
    | 71 -> NONTERM_BTerm 
    | 72 -> NONTERM_BTerm 
    | 73 -> NONTERM_BTerm 
    | 74 -> NONTERM_BTerm 
    | 75 -> NONTERM_BTerm 
    | 76 -> NONTERM_BTerm 
    | 77 -> NONTERM_BTerm 
    | 78 -> NONTERM_BTerm 
    | 79 -> NONTERM_BTerm 
    | 80 -> NONTERM_BTerm 
    | 81 -> NONTERM_BTerm 
    | 82 -> NONTERM_BTerm 
    | 83 -> NONTERM_BTerm 
    | 84 -> NONTERM_BTerm 
    | 85 -> NONTERM_BTerm 
    | 86 -> NONTERM_BTerm 
    | 87 -> NONTERM_Predicate 
    | 88 -> NONTERM_Predicate 
    | 89 -> NONTERM_Predicate 
    | 90 -> NONTERM_Predicate 
    | 91 -> NONTERM_Interactions 
    | 92 -> NONTERM_Interactions 
    | 93 -> NONTERM_Ints 
    | 94 -> NONTERM_Ints 
    | 95 -> NONTERM_Ints 
    | 96 -> NONTERM_Ints 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 59 
let _fsyacc_tagOfErrorTerminal = 57

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | FIXPOINT  -> "FIXPOINT" 
  | INTERACTIONS  -> "INTERACTIONS" 
  | FULL  -> "FULL" 
  | PATHS  -> "PATHS" 
  | DEFAULT  -> "DEFAULT" 
  | CARDINALITY  -> "CARDINALITY" 
  | LEGACY  -> "LEGACY" 
  | NOTHRESHOLDS  -> "NOTHRESHOLDS" 
  | SYNC  -> "SYNC" 
  | ASYNC  -> "ASYNC" 
  | DIRECTIVE  -> "DIRECTIVE" 
  | UNIQUENESS  -> "UNIQUENESS" 
  | LIMIT  -> "LIMIT" 
  | REGULATION  -> "REGULATION" 
  | LENGTH  -> "LENGTH" 
  | UPDATES  -> "UPDATES" 
  | UPATH  -> "UPATH" 
  | PREVENTREPEATS  -> "PREVENTREPEATS" 
  | EOF  -> "EOF" 
  | EOL  -> "EOL" 
  | KOTU  -> "KOTU" 
  | FETU  -> "FETU" 
  | KOT  -> "KOT" 
  | FET  -> "FET" 
  | POS  -> "POS" 
  | NEG  -> "NEG" 
  | OPT  -> "OPT" 
  | TO  -> "TO" 
  | COMMA  -> "COMMA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | EXCL  -> "EXCL" 
  | SAT  -> "SAT" 
  | IMPLIES  -> "IMPLIES" 
  | EQ  -> "EQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NOT  -> "NOT" 
  | AT  -> "AT" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCBRA  -> "LCBRA" 
  | RCBRA  -> "RCBRA" 
  | LSBRA  -> "LSBRA" 
  | RSBRA  -> "RSBRA" 
  | DOT  -> "DOT" 
  | LET  -> "LET" 
  | ASSIGN  -> "ASSIGN" 
  | UNDER  -> "UNDER" 
  | DESCRIPTION _ -> "DESCRIPTION" 
  | PATH _ -> "PATH" 
  | NAME _ -> "NAME" 
  | SPECIES _ -> "SPECIES" 
  | BOOL _ -> "BOOL" 
  | INT32 _ -> "INT32" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | FIXPOINT  -> (null : System.Object) 
  | INTERACTIONS  -> (null : System.Object) 
  | FULL  -> (null : System.Object) 
  | PATHS  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | CARDINALITY  -> (null : System.Object) 
  | LEGACY  -> (null : System.Object) 
  | NOTHRESHOLDS  -> (null : System.Object) 
  | SYNC  -> (null : System.Object) 
  | ASYNC  -> (null : System.Object) 
  | DIRECTIVE  -> (null : System.Object) 
  | UNIQUENESS  -> (null : System.Object) 
  | LIMIT  -> (null : System.Object) 
  | REGULATION  -> (null : System.Object) 
  | LENGTH  -> (null : System.Object) 
  | UPDATES  -> (null : System.Object) 
  | UPATH  -> (null : System.Object) 
  | PREVENTREPEATS  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | EOL  -> (null : System.Object) 
  | KOTU  -> (null : System.Object) 
  | FETU  -> (null : System.Object) 
  | KOT  -> (null : System.Object) 
  | FET  -> (null : System.Object) 
  | POS  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | OPT  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | SAT  -> (null : System.Object) 
  | IMPLIES  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCBRA  -> (null : System.Object) 
  | RCBRA  -> (null : System.Object) 
  | LSBRA  -> (null : System.Object) 
  | RSBRA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | UNDER  -> (null : System.Object) 
  | DESCRIPTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SPECIES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 3us; 4us; 3us; 1us; 65535us; 18us; 19us; 2us; 65535us; 0us; 7us; 4us; 7us; 4us; 65535us; 0us; 8us; 4us; 8us; 11us; 192us; 193us; 192us; 9us; 65535us; 0us; 16us; 4us; 16us; 11us; 12us; 127us; 128us; 136us; 131us; 137us; 132us; 138us; 133us; 139us; 134us; 140us; 135us; 9us; 65535us; 0us; 130us; 4us; 130us; 11us; 130us; 127us; 130us; 136us; 130us; 137us; 130us; 138us; 130us; 139us; 130us; 140us; 130us; 9us; 65535us; 0us; 176us; 4us; 176us; 11us; 176us; 127us; 176us; 136us; 176us; 137us; 176us; 138us; 176us; 139us; 176us; 140us; 176us; 2us; 65535us; 11us; 14us; 193us; 194us; 18us; 65535us; 41us; 42us; 47us; 48us; 52us; 53us; 57us; 58us; 62us; 63us; 67us; 68us; 72us; 73us; 77us; 78us; 82us; 83us; 87us; 88us; 92us; 93us; 97us; 98us; 102us; 103us; 107us; 108us; 112us; 113us; 117us; 118us; 196us; 197us; 200us; 201us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 11us; 14us; 19us; 29us; 39us; 49us; 52us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 2us; 2us; 3us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 4us; 6us; 7us; 87us; 89us; 2us; 6us; 7us; 2us; 6us; 7us; 5us; 6us; 62us; 63us; 64us; 65us; 1us; 6us; 1us; 7us; 1us; 7us; 6us; 8us; 9us; 62us; 63us; 64us; 65us; 1us; 9us; 1us; 10us; 1us; 10us; 4us; 11us; 12us; 13us; 14us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 4us; 15us; 16us; 17us; 18us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 2us; 19us; 20us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 23us; 38us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 70us; 71us; 1us; 24us; 1us; 24us; 1us; 24us; 31us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 71us; 10us; 26us; 27us; 30us; 31us; 38us; 39us; 48us; 49us; 52us; 53us; 2us; 26us; 27us; 1us; 26us; 1us; 26us; 1us; 26us; 10us; 28us; 29us; 32us; 33us; 42us; 43us; 50us; 51us; 54us; 55us; 2us; 28us; 29us; 1us; 28us; 1us; 28us; 1us; 28us; 4us; 30us; 31us; 52us; 53us; 2us; 30us; 31us; 1us; 30us; 1us; 30us; 1us; 30us; 4us; 32us; 33us; 54us; 55us; 2us; 32us; 33us; 1us; 32us; 1us; 32us; 1us; 32us; 10us; 34us; 35us; 36us; 37us; 40us; 41us; 44us; 45us; 46us; 47us; 2us; 34us; 35us; 1us; 34us; 1us; 34us; 1us; 34us; 4us; 36us; 37us; 44us; 45us; 2us; 36us; 37us; 1us; 36us; 1us; 36us; 1us; 36us; 4us; 38us; 39us; 48us; 49us; 2us; 38us; 39us; 1us; 38us; 1us; 38us; 1us; 38us; 4us; 40us; 41us; 46us; 47us; 2us; 40us; 41us; 1us; 40us; 1us; 40us; 1us; 40us; 4us; 42us; 43us; 50us; 51us; 2us; 42us; 43us; 1us; 42us; 1us; 42us; 1us; 42us; 2us; 44us; 45us; 2us; 44us; 45us; 1us; 44us; 1us; 44us; 1us; 44us; 2us; 46us; 47us; 2us; 46us; 47us; 1us; 46us; 1us; 46us; 1us; 46us; 2us; 48us; 49us; 2us; 48us; 49us; 1us; 48us; 1us; 48us; 1us; 48us; 2us; 50us; 51us; 2us; 50us; 51us; 1us; 50us; 1us; 50us; 1us; 50us; 2us; 52us; 53us; 2us; 52us; 53us; 1us; 52us; 1us; 52us; 1us; 52us; 2us; 54us; 55us; 2us; 54us; 55us; 1us; 54us; 1us; 54us; 1us; 54us; 4us; 56us; 57us; 58us; 59us; 6us; 56us; 57us; 58us; 59us; 70us; 71us; 4us; 56us; 57us; 58us; 59us; 2us; 56us; 58us; 2us; 57us; 59us; 1us; 58us; 1us; 59us; 1us; 60us; 5us; 60us; 62us; 63us; 64us; 65us; 1us; 60us; 1us; 61us; 5us; 62us; 62us; 63us; 64us; 65us; 5us; 62us; 63us; 63us; 64us; 65us; 5us; 62us; 63us; 64us; 64us; 65us; 5us; 62us; 63us; 64us; 65us; 65us; 5us; 62us; 63us; 64us; 65us; 66us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 2us; 70us; 71us; 1us; 71us; 1us; 71us; 1us; 71us; 7us; 72us; 73us; 74us; 75us; 76us; 88us; 90us; 4us; 72us; 74us; 75us; 76us; 2us; 72us; 74us; 2us; 73us; 88us; 2us; 73us; 88us; 2us; 73us; 88us; 1us; 73us; 1us; 73us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 76us; 1us; 76us; 1us; 76us; 1us; 76us; 2us; 77us; 81us; 2us; 77us; 81us; 2us; 77us; 81us; 2us; 77us; 81us; 2us; 78us; 82us; 2us; 78us; 82us; 2us; 78us; 82us; 2us; 78us; 82us; 2us; 79us; 83us; 2us; 79us; 83us; 2us; 80us; 84us; 2us; 80us; 84us; 1us; 85us; 1us; 86us; 1us; 86us; 1us; 86us; 1us; 86us; 1us; 86us; 1us; 86us; 1us; 86us; 2us; 87us; 89us; 1us; 88us; 1us; 88us; 1us; 89us; 1us; 89us; 1us; 89us; 1us; 90us; 1us; 90us; 2us; 91us; 92us; 1us; 91us; 1us; 91us; 4us; 93us; 94us; 95us; 96us; 1us; 93us; 1us; 93us; 2us; 95us; 96us; 2us; 95us; 96us; 1us; 96us; 1us; 96us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 12us; 14us; 16us; 18us; 20us; 25us; 28us; 31us; 37us; 39us; 41us; 43us; 50us; 52us; 54us; 56us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 78us; 80us; 82us; 84us; 86us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 142us; 144us; 146us; 148us; 180us; 191us; 194us; 196us; 198us; 200us; 211us; 214us; 216us; 218us; 220us; 225us; 228us; 230us; 232us; 234us; 239us; 242us; 244us; 246us; 248us; 259us; 262us; 264us; 266us; 268us; 273us; 276us; 278us; 280us; 282us; 287us; 290us; 292us; 294us; 296us; 301us; 304us; 306us; 308us; 310us; 315us; 318us; 320us; 322us; 324us; 327us; 330us; 332us; 334us; 336us; 339us; 342us; 344us; 346us; 348us; 351us; 354us; 356us; 358us; 360us; 363us; 366us; 368us; 370us; 372us; 375us; 378us; 380us; 382us; 384us; 387us; 390us; 392us; 394us; 396us; 401us; 408us; 413us; 416us; 419us; 421us; 423us; 425us; 431us; 433us; 435us; 441us; 447us; 453us; 459us; 465us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 484us; 486us; 488us; 490us; 498us; 503us; 506us; 509us; 512us; 515us; 517us; 519us; 521us; 523us; 525us; 527us; 529us; 531us; 533us; 535us; 538us; 541us; 544us; 547us; 550us; 553us; 556us; 559us; 562us; 565us; 568us; 571us; 573us; 575us; 577us; 579us; 581us; 583us; 585us; 587us; 590us; 592us; 594us; 596us; 598us; 600us; 602us; 604us; 607us; 609us; 611us; 616us; 618us; 620us; 623us; 626us; 628us; |]
let _fsyacc_action_rows = 202
let _fsyacc_actionTableElements = [|14us; 32768us; 0us; 177us; 10us; 18us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 9us; 54us; 40us; 56us; 143us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 19us; 4us; 15us; 32768us; 0us; 177us; 10us; 18us; 18us; 6us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 9us; 54us; 40us; 56us; 143us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 2us; 16471us; 45us; 187us; 49us; 10us; 1us; 32768us; 43us; 11us; 13us; 32768us; 0us; 177us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 184us; 54us; 121us; 56us; 143us; 5us; 32768us; 33us; 137us; 34us; 136us; 35us; 138us; 36us; 139us; 44us; 13us; 0us; 16390us; 1us; 32768us; 44us; 15us; 0us; 16391us; 5us; 16392us; 33us; 137us; 34us; 136us; 35us; 138us; 36us; 139us; 51us; 17us; 0us; 16393us; 6us; 32768us; 11us; 20us; 12us; 35us; 13us; 27us; 14us; 37us; 15us; 32us; 17us; 39us; 0us; 16394us; 4us; 32768us; 1us; 21us; 2us; 22us; 3us; 23us; 16us; 24us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 1us; 32768us; 52us; 25us; 1us; 32768us; 56us; 26us; 0us; 16398us; 4us; 32768us; 4us; 28us; 5us; 29us; 6us; 30us; 7us; 31us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 2us; 32768us; 8us; 33us; 9us; 34us; 0us; 16403us; 0us; 16404us; 1us; 32768us; 56us; 36us; 0us; 16405us; 1us; 32768us; 56us; 38us; 0us; 16406us; 0us; 16407us; 8us; 16409us; 33us; 16454us; 34us; 16454us; 35us; 16454us; 36us; 16454us; 41us; 41us; 45us; 44us; 51us; 16454us; 54us; 122us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 43us; 0us; 16408us; 4us; 32768us; 29us; 50us; 30us; 45us; 31us; 65us; 56us; 146us; 3us; 32768us; 29us; 55us; 31us; 75us; 46us; 46us; 1us; 16411us; 41us; 47us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 49us; 0us; 16410us; 3us; 32768us; 30us; 60us; 31us; 85us; 46us; 51us; 1us; 16413us; 41us; 52us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 54us; 0us; 16412us; 2us; 32768us; 31us; 110us; 46us; 56us; 1us; 16415us; 41us; 57us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 59us; 0us; 16414us; 2us; 32768us; 31us; 115us; 46us; 61us; 1us; 16417us; 41us; 62us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 64us; 0us; 16416us; 3us; 32768us; 29us; 80us; 30us; 70us; 46us; 66us; 1us; 16419us; 41us; 67us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 69us; 0us; 16418us; 2us; 32768us; 29us; 90us; 46us; 71us; 1us; 16421us; 41us; 72us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 74us; 0us; 16420us; 2us; 32768us; 29us; 100us; 46us; 76us; 1us; 16423us; 41us; 77us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 79us; 0us; 16422us; 2us; 32768us; 30us; 95us; 46us; 81us; 1us; 16425us; 41us; 82us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 84us; 0us; 16424us; 2us; 32768us; 30us; 105us; 46us; 86us; 1us; 16427us; 41us; 87us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 89us; 0us; 16426us; 1us; 32768us; 46us; 91us; 1us; 16429us; 41us; 92us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 94us; 0us; 16428us; 1us; 32768us; 46us; 96us; 1us; 16431us; 41us; 97us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 99us; 0us; 16430us; 1us; 32768us; 46us; 101us; 1us; 16433us; 41us; 102us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 104us; 0us; 16432us; 1us; 32768us; 46us; 106us; 1us; 16435us; 41us; 107us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 109us; 0us; 16434us; 1us; 32768us; 46us; 111us; 1us; 16437us; 41us; 112us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 114us; 0us; 16436us; 1us; 32768us; 46us; 116us; 1us; 16439us; 41us; 117us; 1us; 32768us; 56us; 195us; 1us; 32768us; 42us; 119us; 0us; 16438us; 1us; 32768us; 54us; 122us; 2us; 16454us; 45us; 145us; 54us; 122us; 2us; 32768us; 24us; 123us; 25us; 124us; 1us; 16440us; 26us; 125us; 1us; 16441us; 26us; 126us; 0us; 16442us; 0us; 16443us; 13us; 32768us; 0us; 177us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 184us; 54us; 144us; 56us; 143us; 5us; 32768us; 33us; 137us; 34us; 136us; 35us; 138us; 36us; 139us; 42us; 129us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 1us; 16447us; 34us; 136us; 3us; 16448us; 33us; 137us; 34us; 136us; 36us; 139us; 2us; 16449us; 33us; 137us; 34us; 136us; 4us; 16450us; 33us; 137us; 34us; 136us; 35us; 138us; 36us; 139us; 13us; 32768us; 0us; 177us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 184us; 54us; 144us; 56us; 143us; 13us; 32768us; 0us; 177us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 184us; 54us; 144us; 56us; 143us; 13us; 32768us; 0us; 177us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 184us; 54us; 144us; 56us; 143us; 13us; 32768us; 0us; 177us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 184us; 54us; 144us; 56us; 143us; 13us; 32768us; 0us; 177us; 20us; 172us; 21us; 174us; 22us; 164us; 23us; 168us; 37us; 141us; 38us; 142us; 39us; 140us; 41us; 127us; 52us; 148us; 53us; 184us; 54us; 144us; 56us; 143us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 1us; 16454us; 45us; 145us; 1us; 32768us; 56us; 146us; 1us; 32768us; 46us; 147us; 0us; 16455us; 3us; 32768us; 32us; 190us; 45us; 151us; 47us; 149us; 3us; 32768us; 22us; 156us; 23us; 160us; 54us; 150us; 0us; 16456us; 1us; 32768us; 56us; 152us; 1us; 32768us; 46us; 153us; 2us; 32768us; 32us; 185us; 47us; 154us; 1us; 32768us; 54us; 155us; 0us; 16457us; 1us; 32768us; 41us; 157us; 1us; 32768us; 54us; 158us; 1us; 32768us; 42us; 159us; 0us; 16459us; 1us; 32768us; 41us; 161us; 1us; 32768us; 54us; 162us; 1us; 32768us; 42us; 163us; 0us; 16460us; 1us; 32768us; 41us; 165us; 1us; 32768us; 54us; 166us; 1us; 32768us; 42us; 167us; 0us; 16461us; 1us; 32768us; 41us; 169us; 1us; 32768us; 54us; 170us; 1us; 32768us; 42us; 171us; 0us; 16462us; 1us; 32768us; 54us; 173us; 0us; 16463us; 1us; 32768us; 54us; 175us; 0us; 16464us; 0us; 16469us; 1us; 32768us; 41us; 178us; 1us; 32768us; 52us; 179us; 1us; 32768us; 45us; 180us; 1us; 32768us; 56us; 181us; 1us; 32768us; 46us; 182us; 1us; 32768us; 42us; 183us; 0us; 16470us; 1us; 16471us; 45us; 187us; 1us; 32768us; 53us; 186us; 0us; 16472us; 1us; 32768us; 56us; 188us; 1us; 32768us; 46us; 189us; 0us; 16473us; 1us; 32768us; 53us; 191us; 0us; 16474us; 1us; 16476us; 28us; 193us; 1us; 32768us; 54us; 120us; 0us; 16475us; 2us; 16478us; 27us; 198us; 28us; 196us; 1us; 32768us; 56us; 195us; 0us; 16477us; 1us; 32768us; 56us; 199us; 1us; 16479us; 28us; 200us; 1us; 32768us; 56us; 195us; 0us; 16480us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 15us; 16us; 17us; 19us; 35us; 36us; 37us; 38us; 39us; 42us; 44us; 58us; 64us; 65us; 67us; 68us; 74us; 75us; 82us; 83us; 88us; 89us; 90us; 91us; 93us; 95us; 96us; 101us; 102us; 103us; 104us; 105us; 108us; 109us; 110us; 112us; 113us; 115us; 116us; 117us; 126us; 128us; 130us; 131us; 136us; 140us; 142us; 144us; 146us; 147us; 151us; 153us; 155us; 157us; 158us; 161us; 163us; 165us; 167us; 168us; 171us; 173us; 175us; 177us; 178us; 182us; 184us; 186us; 188us; 189us; 192us; 194us; 196us; 198us; 199us; 202us; 204us; 206us; 208us; 209us; 212us; 214us; 216us; 218us; 219us; 222us; 224us; 226us; 228us; 229us; 231us; 233us; 235us; 237us; 238us; 240us; 242us; 244us; 246us; 247us; 249us; 251us; 253us; 255us; 256us; 258us; 260us; 262us; 264us; 265us; 267us; 269us; 271us; 273us; 274us; 276us; 278us; 280us; 282us; 283us; 285us; 288us; 291us; 293us; 295us; 296us; 297us; 311us; 317us; 318us; 319us; 320us; 322us; 326us; 329us; 334us; 348us; 362us; 376us; 390us; 404us; 405us; 406us; 407us; 409us; 411us; 413us; 414us; 418us; 422us; 423us; 425us; 427us; 430us; 432us; 433us; 435us; 437us; 439us; 440us; 442us; 444us; 446us; 447us; 449us; 451us; 453us; 454us; 456us; 458us; 460us; 461us; 463us; 464us; 466us; 467us; 468us; 470us; 472us; 474us; 476us; 478us; 480us; 481us; 483us; 485us; 486us; 488us; 490us; 491us; 493us; 494us; 496us; 498us; 499us; 502us; 504us; 505us; 507us; 509us; 511us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 3us; 3us; 1us; 1us; 5us; 5us; 1us; 2us; 2us; 2us; 2us; 2us; 4us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 1us; 4us; 1us; 7us; 4us; 7us; 4us; 8us; 5us; 8us; 5us; 7us; 4us; 8us; 5us; 8us; 5us; 8us; 5us; 8us; 5us; 9us; 6us; 9us; 6us; 9us; 6us; 9us; 6us; 9us; 6us; 9us; 6us; 3us; 3us; 4us; 4us; 3us; 1us; 3us; 3us; 3us; 3us; 2us; 1us; 1us; 1us; 1us; 4us; 3us; 6us; 3us; 6us; 6us; 4us; 4us; 2us; 2us; 4us; 4us; 2us; 2us; 1us; 7us; 1us; 6us; 4us; 3us; 3us; 1us; 3us; 1us; 3us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 16386us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 16391us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 16396us; 16397us; 65535us; 65535us; 16398us; 65535us; 16399us; 16400us; 16401us; 16402us; 65535us; 16403us; 16404us; 65535us; 16405us; 65535us; 16406us; 16407us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 16428us; 65535us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 65535us; 65535us; 65535us; 16434us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 65535us; 65535us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 16442us; 16443us; 65535us; 65535us; 16444us; 16445us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16451us; 16452us; 16453us; 65535us; 65535us; 65535us; 16455us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16457us; 65535us; 65535us; 65535us; 16459us; 65535us; 65535us; 65535us; 16460us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16469us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16470us; 65535us; 65535us; 16472us; 65535us; 65535us; 16473us; 65535us; 16474us; 65535us; 65535us; 16475us; 65535us; 65535us; 16477us; 65535us; 65535us; 65535us; 16480us; |]
let _fsyacc_reductions ()  =    [| 
# 531 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Line list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 540 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                   _1
                   )
# 63 "Parser.fsy"
                 :  Line list));
# 551 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                          _1::_3 
                   )
# 66 "Parser.fsy"
                 : 'Lines));
# 563 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                        [_1]   
                   )
# 67 "Parser.fsy"
                 : 'Lines));
# 574 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Species)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                         _1 
                   )
# 71 "Parser.fsy"
                 : 'Line));
# 585 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interaction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                            Interaction(_1) 
                   )
# 72 "Parser.fsy"
                 : 'Line));
# 596 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                          Assign(_1,_4)          
                   )
# 73 "Parser.fsy"
                 : 'Line));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interactions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                               Motif(_1,_4)          
                   )
# 74 "Parser.fsy"
                 : 'Line));
# 620 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                        Assert(_1,None)     
                   )
# 75 "Parser.fsy"
                 : 'Line));
# 631 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                 Assert(_1,Some(_2)) 
                   )
# 76 "Parser.fsy"
                 : 'Line));
# 643 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Directive)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                  Directive(_2)       
                   )
# 77 "Parser.fsy"
                 : 'Line));
# 654 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                 Uniqueness(Settings.Interactions) 
                   )
# 80 "Parser.fsy"
                 : 'Directive));
# 664 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                           Uniqueness(Settings.Model)        
                   )
# 81 "Parser.fsy"
                 : 'Directive));
# 674 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                            Uniqueness(Settings.All)            
                   )
# 82 "Parser.fsy"
                 : 'Directive));
# 684 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                    Uniqueness(Settings.Path(_3,_4))    
                   )
# 83 "Parser.fsy"
                 : 'Directive));
# 696 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                              Regulation(Settings.Default)        
                   )
# 84 "Parser.fsy"
                 : 'Directive));
# 706 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                 Regulation(Settings.Cardinality)    
                   )
# 85 "Parser.fsy"
                 : 'Directive));
# 716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                             Regulation(Settings.Legacy)        
                   )
# 86 "Parser.fsy"
                 : 'Directive));
# 726 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                 Regulation(Settings.NoThresholds)    
                   )
# 87 "Parser.fsy"
                 : 'Directive));
# 736 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                         Updates(Settings.Synchronous)        
                   )
# 88 "Parser.fsy"
                 : 'Directive));
# 746 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                          Updates(Settings.Asynchronous)    
                   )
# 89 "Parser.fsy"
                 : 'Directive));
# 756 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                        Interaction_limit(Some(_2))        
                   )
# 90 "Parser.fsy"
                 : 'Directive));
# 767 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                         Traj_length(_2)                    
                   )
# 91 "Parser.fsy"
                 : 'Directive));
# 778 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                           PreventRepeats                    
                   )
# 92 "Parser.fsy"
                 : 'Directive));
# 788 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                         Species(_1,Some(_3),false,false,false)
                   )
# 95 "Parser.fsy"
                 : 'Species));
# 800 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                           Species(_1,None,false,false,false)
                   )
# 96 "Parser.fsy"
                 : 'Species));
# 811 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                       Species(_1,Some(_6),true,false,false)
                   )
# 97 "Parser.fsy"
                 : 'Species));
# 823 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                         Species(_1,None,true,false,false)
                   )
# 98 "Parser.fsy"
                 : 'Species));
# 834 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                      Species(_1,Some(_6),false,true,false)
                   )
# 99 "Parser.fsy"
                 : 'Species));
# 846 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                        Species(_1,None,false,true,false)
                   )
# 100 "Parser.fsy"
                 : 'Species));
# 857 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                                           Species(_1,Some(_7),true,true,false)
                   )
# 101 "Parser.fsy"
                 : 'Species));
# 869 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                            Species(_1,None,true,true,false)
                   )
# 102 "Parser.fsy"
                 : 'Species));
# 880 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                           Species(_1,Some(_7),true,true,false)
                   )
# 103 "Parser.fsy"
                 : 'Species));
# 892 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                            Species(_1,None,true,true,false)
                   )
# 104 "Parser.fsy"
                 : 'Species));
# 903 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                                      Species(_1,Some(_6),false,false,true)
                   )
# 105 "Parser.fsy"
                 : 'Species));
# 915 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                        Species(_1,None,false,false,true)
                   )
# 106 "Parser.fsy"
                 : 'Species));
# 926 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                                           Species(_1,Some(_7),true,false,true)
                   )
# 107 "Parser.fsy"
                 : 'Species));
# 938 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                            Species(_1,None,true,false,true)
                   )
# 108 "Parser.fsy"
                 : 'Species));
# 949 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                                           Species(_1,Some(_7),true,false,true)
                   )
# 109 "Parser.fsy"
                 : 'Species));
# 961 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                            Species(_1,None,true,false,true)
                   )
# 110 "Parser.fsy"
                 : 'Species));
# 972 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                          Species(_1,Some(_7),false,true,true)
                   )
# 111 "Parser.fsy"
                 : 'Species));
# 984 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                            Species(_1,None,false,true,true)
                   )
# 112 "Parser.fsy"
                 : 'Species));
# 995 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                                          Species(_1,Some(_7),false,true,true)
                   )
# 113 "Parser.fsy"
                 : 'Species));
# 1007 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                            Species(_1,None,false,true,true)
                   )
# 114 "Parser.fsy"
                 : 'Species));
# 1018 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                                                Species(_1,Some(_8),true,true,true)
                   )
# 115 "Parser.fsy"
                 : 'Species));
# 1030 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                                  Species(_1,None,true,true,true)
                   )
# 116 "Parser.fsy"
                 : 'Species));
# 1041 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                                Species(_1,Some(_8),true,true,true)
                   )
# 117 "Parser.fsy"
                 : 'Species));
# 1053 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                  Species(_1,None,true,true,true)
                   )
# 118 "Parser.fsy"
                 : 'Species));
# 1064 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                                Species(_1,Some(_8),true,true,true)
                   )
# 119 "Parser.fsy"
                 : 'Species));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                  Species(_1,None,true,true,true)
                   )
# 120 "Parser.fsy"
                 : 'Species));
# 1087 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                                Species(_1,Some(_8),true,true,true)
                   )
# 121 "Parser.fsy"
                 : 'Species));
# 1099 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                                  Species(_1,None,true,true,true)
                   )
# 122 "Parser.fsy"
                 : 'Species));
# 1110 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                                Species(_1,Some(_8),true,true,true)
                   )
# 123 "Parser.fsy"
                 : 'Species));
# 1122 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                  Species(_1,None,true,true,true)
                   )
# 124 "Parser.fsy"
                 : 'Species));
# 1133 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                                Species(_1,Some(_8),true,true,true)
                   )
# 125 "Parser.fsy"
                 : 'Species));
# 1145 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                  Species(_1,None,true,true,true)
                   )
# 126 "Parser.fsy"
                 : 'Species));
# 1156 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                              _1,_2,true,true
                   )
# 133 "Parser.fsy"
                 : 'Interaction));
# 1168 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                              _1,_2,false,true
                   )
# 134 "Parser.fsy"
                 : 'Interaction));
# 1180 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                 _1,_2,true,false
                   )
# 135 "Parser.fsy"
                 : 'Interaction));
# 1192 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                 _1,_2,false,false
                   )
# 136 "Parser.fsy"
                 : 'Interaction));
# 1204 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                              _2
                   )
# 139 "Parser.fsy"
                 : 'BExpr));
# 1215 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                   BTerm(_1)
                   )
# 140 "Parser.fsy"
                 : 'BExpr));
# 1226 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                             Beq(_1,_3)
                   )
# 141 "Parser.fsy"
                 : 'BExpr));
# 1238 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                              Imp(_1,_3)
                   )
# 142 "Parser.fsy"
                 : 'BExpr));
# 1250 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                              And(_1,_3)
                   )
# 143 "Parser.fsy"
                 : 'BExpr));
# 1262 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                             Or(_1,_3)
                   )
# 144 "Parser.fsy"
                 : 'BExpr));
# 1274 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                          Not(_2)
                   )
# 145 "Parser.fsy"
                 : 'BExpr));
# 1285 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                         BConst(true)
                   )
# 148 "Parser.fsy"
                 : 'BTerm));
# 1295 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                       BConst(false)
                   )
# 149 "Parser.fsy"
                 : 'BTerm));
# 1305 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                       if _1>0 then BConst(true) else BConst(false)
                   )
# 150 "Parser.fsy"
                 : 'BTerm));
# 1316 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                        BVar(AbsStateVar(0,_1))
                   )
# 151 "Parser.fsy"
                 : 'BTerm));
# 1327 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                      BVar(AbsPStateVar(_3,_1))
                   )
# 152 "Parser.fsy"
                 : 'BTerm));
# 1339 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                               BVar(AbsKStateVar(_1,0,_3))
                   )
# 153 "Parser.fsy"
                 : 'BTerm));
# 1351 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                            BVar(StateVar(_1,_3,_6))
                   )
# 154 "Parser.fsy"
                 : 'BTerm));
# 1364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                               BVar(AbsKStateVar(_1,0,_3))
                   )
# 155 "Parser.fsy"
                 : 'BTerm));
# 1376 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                            BVar(PathVar(_1,"KO_" + _5))
                   )
# 156 "Parser.fsy"
                 : 'BTerm));
# 1388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                            BVar(PathVar(_1,"FE_" + _5))
                   )
# 157 "Parser.fsy"
                 : 'BTerm));
# 1400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                      BVar(AbsPathVar("KO_" + _3))
                   )
# 158 "Parser.fsy"
                 : 'BTerm));
# 1411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                      BVar(AbsPathVar("FE_" + _3))
                   )
# 159 "Parser.fsy"
                 : 'BTerm));
# 1422 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                            BVar(AbsPathVar("KO_" + _2))
                   )
# 160 "Parser.fsy"
                 : 'BTerm));
# 1433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                            BVar(AbsPathVar("FE_" + _2))
                   )
# 161 "Parser.fsy"
                 : 'BTerm));
# 1444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                      BVar(AbsPathVar("KO_" + _3))
                   )
# 162 "Parser.fsy"
                 : 'BTerm));
# 1455 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                      BVar(AbsPathVar("FE_" + _3))
                   )
# 163 "Parser.fsy"
                 : 'BTerm));
# 1466 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                            BVar(AbsPathVar("KO_" + _2))
                   )
# 164 "Parser.fsy"
                 : 'BTerm));
# 1477 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                            BVar(AbsPathVar("FE_" + _2))
                   )
# 165 "Parser.fsy"
                 : 'BTerm));
# 1488 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                          Predicate(_1)
                   )
# 166 "Parser.fsy"
                 : 'BTerm));
# 1499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                                        Fixpoint(_3,_5)
                   )
# 167 "Parser.fsy"
                 : 'BTerm));
# 1511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                      AbsPred(_1)
                   )
# 170 "Parser.fsy"
                 : 'Predicate));
# 1522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                          ConcPred(_6,_1,_3)
                   )
# 171 "Parser.fsy"
                 : 'Predicate));
# 1535 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                   AbsPPred(_1,_3)
                   )
# 172 "Parser.fsy"
                 : 'Predicate));
# 1547 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                             AbsKPred(_3,_1)
                   )
# 173 "Parser.fsy"
                 : 'Predicate));
# 1559 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interaction)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interactions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                        _1::_3
                   )
# 177 "Parser.fsy"
                 : 'Interactions));
# 1571 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interaction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                          [_1]
                   )
# 178 "Parser.fsy"
                 : 'Interactions));
# 1582 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                            _1::_3
                   )
# 181 "Parser.fsy"
                 : 'Ints));
# 1594 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                    [_1]
                   )
# 182 "Parser.fsy"
                 : 'Ints));
# 1605 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                          [_1.._3]
                   )
# 183 "Parser.fsy"
                 : 'Ints));
# 1617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                   List.append([_1.._3]) _5
                   )
# 184 "Parser.fsy"
                 : 'Ints));
|]
# 1631 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 60;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Line list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
