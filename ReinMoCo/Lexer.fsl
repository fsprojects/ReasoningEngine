{
module Microsoft.Research.REINMoCo.Lexer
open System
open Parser
open FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}

// These are some regular expression definitions
let digit = ['0'-'9']
let alpha = ['0'-'9' 'a'-'z' 'A'-'Z' '_']
let whitespace = [' ' '\t']
let newline = ('\n' | '\r' | '\r' '\n')
let comment = ("//" ['0'-'9' 'a'-'z' 'A'-'Z' '_' '-' '\t' ' ' ':' '%' '$' '£' '*' '(' ')' '[' ']' ';' '#' '|' '=' '"' '\r']* )
let description = ('"' ['0'-'9' 'a'-'z' 'A'-'Z' '_' '-' '\t' ' ' ',' '.' '(' ')' '%' '$' '\n' '\r' '+']* '"')

rule tokenize = parse
| whitespace	{ tokenize lexbuf }
| newline       
| comment		{ lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }


//text info
| description  {DESCRIPTION (lexeme lexbuf)}

//keywords
| "directive"		{DIRECTIVE}
| "uniqueness"		{UNIQUENESS}
| "limit"			{LIMIT}
| "regulation"		{REGULATION} 
| "length"			{LENGTH} 
| "updates"			{UPDATES}
| "path"			{UPATH}
  
| "interactions"	{INTERACTIONS}
| "full"			{FULL}
| "paths"			{PATHS}
  
| "legacy"			{LEGACY}
| "cardinality"		{CARDINALITY}
| "default"			{DEFAULT}
| "noThresholds"	{NOTHRESHOLDS}
| "preventRepeatedInteractions" {PREVENTREPEATS}
 
| "sync"			{SYNC}
| "async"			{ASYNC}

| "Fixpoint"	
| "fixpoint"		{FIXPOINT}


| "satisfies"
| "|="			{SAT}
| "positive"	{POS}
| "negative"	{NEG}
| "optional"	{OPT}
| ".."			{TO}
| ","			{COMMA}
| "+"			{PLUS}
| "-"			{MINUS}
| "!"			{EXCL}
| "KO_"			{KOTU}
| "FE_"			{FETU}
| "KO"			{KOT}
| "FE"			{FET}

//other symbols (make sure species are parsed already
| ":="			{ASSIGN }
| "{"			{LCBRA  }
| "}"			{RCBRA  }
| "["			{LSBRA  }
| "]"			{RSBRA  }
| "("			{LPAREN }
| ")"			{RPAREN }
| "."			{DOT    }

// Logical
| "true"		
| "True"		{TRUE}
| "false"		
| "False"       {FALSE}
| "!"
| "not"			{NOT}
| "&"
| "and"			{AND}
| "|"
| "or"			{OR}
| "=>"
| "implies"		{IMPLIES}
| "<=>"
| "="			{EQ}

// Numeric constants
| digit+		{ INT32 (Int32.Parse(lexeme lexbuf)) }

//variable names
| '$'alpha+ 	{NAME (lexeme lexbuf)} //property
| '#'alpha+ 	{PATH  (lexeme lexbuf)} //experiment


// Species 
| alpha+	{SPECIES (lexeme lexbuf)}

// EOF
| ";"	{ EOL }
| eof   { EOF }

