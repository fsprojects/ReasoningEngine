// Signature file for parser generated by fsyacc
module Microsoft.Research.ReasoningEngine.Parser
type token = 
  | CARD
  | P
  | K
  | UPDATE
  | ASSIGN
  | RELATE
  | UNIQUE
  | IF
  | THEN
  | ELSE
  | DOT
  | COMMA
  | LSBRA
  | RSBRA
  | LBRA
  | RBRA
  | INTT
  | BOOLT
  | NATT
  | STATE
  | PATH
  | SYSTEM
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | MUL
  | NOT
  | GT
  | GE
  | LT
  | LE
  | EQ
  | TRUE
  | FALSE
  | AND
  | OR
  | IMPLIES
  | EQUIVALENT
  | EOF
  | EOL
  | PATHNAME of (string)
  | VAR of (string)
  | BOOL of (System.Boolean)
  | INT32 of (System.Int32)
type tokenId = 
    | TOKEN_CARD
    | TOKEN_P
    | TOKEN_K
    | TOKEN_UPDATE
    | TOKEN_ASSIGN
    | TOKEN_RELATE
    | TOKEN_UNIQUE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_LSBRA
    | TOKEN_RSBRA
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_INTT
    | TOKEN_BOOLT
    | TOKEN_NATT
    | TOKEN_STATE
    | TOKEN_PATH
    | TOKEN_SYSTEM
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MUL
    | TOKEN_NOT
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_EQ
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_IMPLIES
    | TOKEN_EQUIVALENT
    | TOKEN_EOF
    | TOKEN_EOL
    | TOKEN_PATHNAME
    | TOKEN_VAR
    | TOKEN_BOOL
    | TOKEN_INT32
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Lines
    | NONTERM_Line
    | NONTERM_VarDecl
    | NONTERM_Type
    | NONTERM_Scope
    | NONTERM_Expr
    | NONTERM_BTerm
    | NONTERM_BExprList
    | NONTERM_BExpr
    | NONTERM_CExpr
    | NONTERM_NTerm
    | NONTERM_NExpr
    | NONTERM_Var
    | NONTERM_Updates
    | NONTERM_VarList
    | NONTERM_UpdateR
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( Spec ) 
