// Implementation file for parser generated by fsyacc
module Microsoft.Research.ReasoningEngine.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Var
open Constraint
open Dynamics

type Line = 
    |VarDecl of VarDef
    |Assert of BExpr
    |UpdateDecl of Update

and Spec =
    |Spec of Line list

# 22 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | CARD
  | P
  | K
  | UPDATE
  | ASSIGN
  | RELATE
  | UNIQUE
  | IF
  | THEN
  | ELSE
  | DOT
  | COMMA
  | LSBRA
  | RSBRA
  | LBRA
  | RBRA
  | INTT
  | BOOLT
  | NATT
  | STATE
  | PATH
  | SYSTEM
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | MUL
  | NOT
  | GT
  | GE
  | LT
  | LE
  | EQ
  | TRUE
  | FALSE
  | AND
  | OR
  | IMPLIES
  | EQUIVALENT
  | EOF
  | EOL
  | PATHNAME of (string)
  | VAR of (string)
  | BOOL of (System.Boolean)
  | INT32 of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_CARD
    | TOKEN_P
    | TOKEN_K
    | TOKEN_UPDATE
    | TOKEN_ASSIGN
    | TOKEN_RELATE
    | TOKEN_UNIQUE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_LSBRA
    | TOKEN_RSBRA
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_INTT
    | TOKEN_BOOLT
    | TOKEN_NATT
    | TOKEN_STATE
    | TOKEN_PATH
    | TOKEN_SYSTEM
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MUL
    | TOKEN_NOT
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_EQ
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_IMPLIES
    | TOKEN_EQUIVALENT
    | TOKEN_EOF
    | TOKEN_EOL
    | TOKEN_PATHNAME
    | TOKEN_VAR
    | TOKEN_BOOL
    | TOKEN_INT32
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Lines
    | NONTERM_Line
    | NONTERM_VarDecl
    | NONTERM_Type
    | NONTERM_Scope
    | NONTERM_Expr
    | NONTERM_BTerm
    | NONTERM_BExprList
    | NONTERM_BExpr
    | NONTERM_CExpr
    | NONTERM_NTerm
    | NONTERM_NExpr
    | NONTERM_Var
    | NONTERM_Updates
    | NONTERM_VarList
    | NONTERM_UpdateR

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | CARD  -> 0 
  | P  -> 1 
  | K  -> 2 
  | UPDATE  -> 3 
  | ASSIGN  -> 4 
  | RELATE  -> 5 
  | UNIQUE  -> 6 
  | IF  -> 7 
  | THEN  -> 8 
  | ELSE  -> 9 
  | DOT  -> 10 
  | COMMA  -> 11 
  | LSBRA  -> 12 
  | RSBRA  -> 13 
  | LBRA  -> 14 
  | RBRA  -> 15 
  | INTT  -> 16 
  | BOOLT  -> 17 
  | NATT  -> 18 
  | STATE  -> 19 
  | PATH  -> 20 
  | SYSTEM  -> 21 
  | LPAREN  -> 22 
  | RPAREN  -> 23 
  | PLUS  -> 24 
  | MINUS  -> 25 
  | MUL  -> 26 
  | NOT  -> 27 
  | GT  -> 28 
  | GE  -> 29 
  | LT  -> 30 
  | LE  -> 31 
  | EQ  -> 32 
  | TRUE  -> 33 
  | FALSE  -> 34 
  | AND  -> 35 
  | OR  -> 36 
  | IMPLIES  -> 37 
  | EQUIVALENT  -> 38 
  | EOF  -> 39 
  | EOL  -> 40 
  | PATHNAME _ -> 41 
  | VAR _ -> 42 
  | BOOL _ -> 43 
  | INT32 _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_CARD 
  | 1 -> TOKEN_P 
  | 2 -> TOKEN_K 
  | 3 -> TOKEN_UPDATE 
  | 4 -> TOKEN_ASSIGN 
  | 5 -> TOKEN_RELATE 
  | 6 -> TOKEN_UNIQUE 
  | 7 -> TOKEN_IF 
  | 8 -> TOKEN_THEN 
  | 9 -> TOKEN_ELSE 
  | 10 -> TOKEN_DOT 
  | 11 -> TOKEN_COMMA 
  | 12 -> TOKEN_LSBRA 
  | 13 -> TOKEN_RSBRA 
  | 14 -> TOKEN_LBRA 
  | 15 -> TOKEN_RBRA 
  | 16 -> TOKEN_INTT 
  | 17 -> TOKEN_BOOLT 
  | 18 -> TOKEN_NATT 
  | 19 -> TOKEN_STATE 
  | 20 -> TOKEN_PATH 
  | 21 -> TOKEN_SYSTEM 
  | 22 -> TOKEN_LPAREN 
  | 23 -> TOKEN_RPAREN 
  | 24 -> TOKEN_PLUS 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_MUL 
  | 27 -> TOKEN_NOT 
  | 28 -> TOKEN_GT 
  | 29 -> TOKEN_GE 
  | 30 -> TOKEN_LT 
  | 31 -> TOKEN_LE 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_TRUE 
  | 34 -> TOKEN_FALSE 
  | 35 -> TOKEN_AND 
  | 36 -> TOKEN_OR 
  | 37 -> TOKEN_IMPLIES 
  | 38 -> TOKEN_EQUIVALENT 
  | 39 -> TOKEN_EOF 
  | 40 -> TOKEN_EOL 
  | 41 -> TOKEN_PATHNAME 
  | 42 -> TOKEN_VAR 
  | 43 -> TOKEN_BOOL 
  | 44 -> TOKEN_INT32 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Lines 
    | 3 -> NONTERM_Lines 
    | 4 -> NONTERM_Line 
    | 5 -> NONTERM_Line 
    | 6 -> NONTERM_Line 
    | 7 -> NONTERM_Line 
    | 8 -> NONTERM_VarDecl 
    | 9 -> NONTERM_VarDecl 
    | 10 -> NONTERM_Type 
    | 11 -> NONTERM_Type 
    | 12 -> NONTERM_Type 
    | 13 -> NONTERM_Type 
    | 14 -> NONTERM_Type 
    | 15 -> NONTERM_Scope 
    | 16 -> NONTERM_Scope 
    | 17 -> NONTERM_Scope 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_BTerm 
    | 21 -> NONTERM_BTerm 
    | 22 -> NONTERM_BTerm 
    | 23 -> NONTERM_BTerm 
    | 24 -> NONTERM_BTerm 
    | 25 -> NONTERM_BExprList 
    | 26 -> NONTERM_BExprList 
    | 27 -> NONTERM_BExpr 
    | 28 -> NONTERM_BExpr 
    | 29 -> NONTERM_BExpr 
    | 30 -> NONTERM_BExpr 
    | 31 -> NONTERM_BExpr 
    | 32 -> NONTERM_BExpr 
    | 33 -> NONTERM_CExpr 
    | 34 -> NONTERM_CExpr 
    | 35 -> NONTERM_CExpr 
    | 36 -> NONTERM_CExpr 
    | 37 -> NONTERM_CExpr 
    | 38 -> NONTERM_NTerm 
    | 39 -> NONTERM_NTerm 
    | 40 -> NONTERM_NTerm 
    | 41 -> NONTERM_NTerm 
    | 42 -> NONTERM_NExpr 
    | 43 -> NONTERM_NExpr 
    | 44 -> NONTERM_NExpr 
    | 45 -> NONTERM_NExpr 
    | 46 -> NONTERM_NExpr 
    | 47 -> NONTERM_NExpr 
    | 48 -> NONTERM_Var 
    | 49 -> NONTERM_Var 
    | 50 -> NONTERM_Var 
    | 51 -> NONTERM_Var 
    | 52 -> NONTERM_Var 
    | 53 -> NONTERM_Var 
    | 54 -> NONTERM_Var 
    | 55 -> NONTERM_Var 
    | 56 -> NONTERM_Var 
    | 57 -> NONTERM_Updates 
    | 58 -> NONTERM_Updates 
    | 59 -> NONTERM_VarList 
    | 60 -> NONTERM_VarList 
    | 61 -> NONTERM_UpdateR 
    | 62 -> NONTERM_UpdateR 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | CARD  -> "CARD" 
  | P  -> "P" 
  | K  -> "K" 
  | UPDATE  -> "UPDATE" 
  | ASSIGN  -> "ASSIGN" 
  | RELATE  -> "RELATE" 
  | UNIQUE  -> "UNIQUE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | LSBRA  -> "LSBRA" 
  | RSBRA  -> "RSBRA" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | INTT  -> "INTT" 
  | BOOLT  -> "BOOLT" 
  | NATT  -> "NATT" 
  | STATE  -> "STATE" 
  | PATH  -> "PATH" 
  | SYSTEM  -> "SYSTEM" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MUL  -> "MUL" 
  | NOT  -> "NOT" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | EQ  -> "EQ" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | IMPLIES  -> "IMPLIES" 
  | EQUIVALENT  -> "EQUIVALENT" 
  | EOF  -> "EOF" 
  | EOL  -> "EOL" 
  | PATHNAME _ -> "PATHNAME" 
  | VAR _ -> "VAR" 
  | BOOL _ -> "BOOL" 
  | INT32 _ -> "INT32" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | CARD  -> (null : System.Object) 
  | P  -> (null : System.Object) 
  | K  -> (null : System.Object) 
  | UPDATE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | RELATE  -> (null : System.Object) 
  | UNIQUE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LSBRA  -> (null : System.Object) 
  | RSBRA  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | INTT  -> (null : System.Object) 
  | BOOLT  -> (null : System.Object) 
  | NATT  -> (null : System.Object) 
  | STATE  -> (null : System.Object) 
  | PATH  -> (null : System.Object) 
  | SYSTEM  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | IMPLIES  -> (null : System.Object) 
  | EQUIVALENT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | EOL  -> (null : System.Object) 
  | PATHNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 3us; 4us; 3us; 2us; 65535us; 0us; 6us; 4us; 6us; 2us; 65535us; 14us; 15us; 18us; 19us; 3us; 65535us; 0us; 14us; 4us; 14us; 17us; 18us; 1us; 65535us; 145us; 146us; 14us; 65535us; 0us; 45us; 4us; 45us; 10us; 45us; 38us; 45us; 43us; 45us; 52us; 45us; 53us; 45us; 54us; 45us; 55us; 45us; 56us; 57us; 73us; 45us; 76us; 45us; 145us; 45us; 148us; 45us; 2us; 65535us; 43us; 44us; 73us; 74us; 13us; 65535us; 0us; 7us; 4us; 7us; 10us; 11us; 38us; 39us; 43us; 42us; 52us; 46us; 53us; 47us; 54us; 48us; 55us; 49us; 73us; 42us; 76us; 50us; 145us; 34us; 148us; 51us; 14us; 65535us; 0us; 35us; 4us; 35us; 10us; 35us; 38us; 35us; 43us; 35us; 52us; 35us; 53us; 35us; 54us; 35us; 55us; 35us; 56us; 35us; 73us; 35us; 76us; 35us; 145us; 35us; 148us; 35us; 26us; 65535us; 0us; 92us; 4us; 92us; 10us; 92us; 38us; 92us; 43us; 92us; 52us; 92us; 53us; 92us; 54us; 92us; 55us; 92us; 56us; 92us; 60us; 92us; 62us; 92us; 64us; 92us; 66us; 92us; 68us; 92us; 73us; 92us; 76us; 92us; 77us; 92us; 79us; 92us; 81us; 92us; 88us; 92us; 89us; 92us; 90us; 92us; 91us; 92us; 145us; 92us; 148us; 92us; 26us; 65535us; 0us; 59us; 4us; 59us; 10us; 59us; 38us; 58us; 43us; 59us; 52us; 59us; 53us; 59us; 54us; 59us; 55us; 59us; 56us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 73us; 59us; 76us; 59us; 77us; 78us; 79us; 80us; 81us; 82us; 88us; 84us; 89us; 85us; 90us; 86us; 91us; 87us; 145us; 33us; 148us; 59us; 26us; 65535us; 0us; 41us; 4us; 41us; 10us; 41us; 38us; 41us; 43us; 41us; 52us; 41us; 53us; 41us; 54us; 41us; 55us; 41us; 56us; 41us; 60us; 71us; 62us; 71us; 64us; 71us; 66us; 71us; 68us; 71us; 73us; 41us; 76us; 41us; 77us; 71us; 79us; 71us; 81us; 71us; 88us; 71us; 89us; 71us; 90us; 71us; 91us; 71us; 145us; 41us; 148us; 41us; 3us; 65535us; 8us; 9us; 12us; 13us; 129us; 130us; 4us; 65535us; 8us; 147us; 12us; 147us; 129us; 147us; 143us; 144us; 3us; 65535us; 8us; 128us; 12us; 128us; 129us; 128us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 12us; 15us; 19us; 21us; 36us; 39us; 53us; 68us; 95us; 122us; 149us; 153us; 158us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 2us; 2us; 3us; 1us; 2us; 1us; 4us; 5us; 5us; 28us; 29us; 30us; 31us; 2us; 6us; 7us; 1us; 6us; 1us; 7us; 5us; 7us; 28us; 29us; 30us; 31us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 2us; 10us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 2us; 12us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 9us; 18us; 33us; 34us; 35us; 36us; 37us; 43us; 44us; 45us; 5us; 19us; 28us; 29us; 30us; 31us; 1us; 20us; 1us; 21us; 1us; 22us; 2us; 23us; 42us; 5us; 23us; 28us; 29us; 30us; 31us; 1us; 23us; 2us; 24us; 39us; 6us; 25us; 26us; 28us; 29us; 30us; 31us; 1us; 26us; 1us; 26us; 1us; 27us; 5us; 28us; 28us; 29us; 30us; 31us; 5us; 28us; 29us; 29us; 30us; 31us; 5us; 28us; 29us; 30us; 30us; 31us; 5us; 28us; 29us; 30us; 31us; 31us; 5us; 28us; 29us; 30us; 31us; 41us; 5us; 28us; 29us; 30us; 31us; 62us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 9us; 33us; 34us; 35us; 36us; 37us; 42us; 43us; 44us; 45us; 8us; 33us; 34us; 35us; 36us; 37us; 43us; 44us; 45us; 1us; 33us; 4us; 33us; 43us; 44us; 45us; 1us; 34us; 4us; 34us; 43us; 44us; 45us; 1us; 35us; 4us; 35us; 43us; 44us; 45us; 1us; 36us; 4us; 36us; 43us; 44us; 45us; 1us; 37us; 4us; 37us; 43us; 44us; 45us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 4us; 41us; 43us; 44us; 45us; 1us; 41us; 4us; 41us; 43us; 44us; 45us; 1us; 42us; 4us; 42us; 43us; 44us; 45us; 1us; 42us; 4us; 43us; 43us; 44us; 45us; 4us; 43us; 44us; 44us; 45us; 4us; 43us; 44us; 45us; 45us; 4us; 43us; 44us; 45us; 46us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 4us; 49us; 51us; 53us; 54us; 1us; 49us; 1us; 49us; 4us; 50us; 52us; 55us; 56us; 1us; 50us; 1us; 50us; 3us; 51us; 53us; 54us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 3us; 52us; 55us; 56us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 2us; 53us; 54us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 54us; 2us; 55us; 56us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 2us; 57us; 58us; 1us; 58us; 1us; 58us; 2us; 59us; 60us; 3us; 59us; 60us; 61us; 2us; 59us; 60us; 3us; 59us; 60us; 61us; 2us; 59us; 60us; 3us; 59us; 60us; 61us; 2us; 59us; 60us; 3us; 59us; 60us; 61us; 2us; 59us; 60us; 3us; 59us; 60us; 61us; 2us; 59us; 60us; 3us; 59us; 60us; 61us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 12us; 14us; 16us; 22us; 25us; 27us; 29us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 56us; 58us; 60us; 62us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 89us; 95us; 97us; 99us; 101us; 104us; 110us; 112us; 115us; 122us; 124us; 126us; 128us; 134us; 140us; 146us; 152us; 158us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 186us; 195us; 197us; 202us; 204us; 209us; 211us; 216us; 218us; 223us; 225us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 251us; 253us; 258us; 260us; 265us; 267us; 272us; 277us; 282us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 304us; 306us; 308us; 313us; 315us; 317us; 321us; 323us; 325us; 327us; 329us; 333us; 335us; 337us; 339us; 341us; 344us; 346us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 363us; 365us; 367us; 369us; 371us; 373us; 375us; 377us; 379us; 382us; 384us; 386us; 389us; 393us; 396us; 400us; 403us; 407us; 410us; 414us; 417us; 421us; 424us; 428us; 430us; 432us; 434us; 436us; 438us; |]
let _fsyacc_action_rows = 149
let _fsyacc_actionTableElements = [|16us; 32768us; 0us; 72us; 1us; 97us; 3us; 8us; 6us; 17us; 7us; 76us; 19us; 32us; 20us; 31us; 21us; 30us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 40us; 4us; 16us; 16387us; 0us; 72us; 1us; 97us; 3us; 8us; 6us; 17us; 7us; 76us; 19us; 32us; 20us; 31us; 21us; 30us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 0us; 16386us; 0us; 16388us; 4us; 16389us; 35us; 54us; 36us; 55us; 37us; 53us; 38us; 52us; 2us; 32768us; 1us; 132us; 14us; 10us; 0us; 16390us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 5us; 32768us; 15us; 12us; 35us; 54us; 36us; 55us; 37us; 53us; 38us; 52us; 1us; 32768us; 1us; 132us; 0us; 16391us; 3us; 32768us; 16us; 21us; 17us; 29us; 18us; 25us; 1us; 32768us; 42us; 16us; 0us; 16392us; 3us; 32768us; 19us; 32us; 20us; 31us; 21us; 30us; 3us; 32768us; 16us; 21us; 17us; 29us; 18us; 25us; 1us; 32768us; 42us; 20us; 0us; 16393us; 1us; 16394us; 12us; 22us; 1us; 32768us; 44us; 23us; 1us; 32768us; 13us; 24us; 0us; 16395us; 1us; 16396us; 12us; 26us; 1us; 32768us; 44us; 27us; 1us; 32768us; 13us; 28us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 8us; 16402us; 24us; 88us; 25us; 89us; 26us; 90us; 28us; 60us; 29us; 62us; 30us; 64us; 31us; 66us; 32us; 68us; 4us; 16403us; 35us; 54us; 36us; 55us; 37us; 53us; 38us; 52us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 5us; 32768us; 23us; 40us; 35us; 54us; 36us; 55us; 37us; 53us; 38us; 52us; 0us; 16407us; 8us; 16408us; 24us; 16423us; 25us; 16423us; 26us; 16423us; 28us; 16423us; 29us; 16423us; 30us; 16423us; 31us; 16423us; 32us; 16423us; 5us; 16409us; 11us; 43us; 35us; 54us; 36us; 55us; 37us; 53us; 38us; 52us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 1us; 16413us; 38us; 52us; 3us; 16414us; 36us; 55us; 37us; 53us; 38us; 52us; 2us; 16415us; 37us; 53us; 38us; 52us; 5us; 32768us; 8us; 77us; 35us; 54us; 36us; 55us; 37us; 53us; 38us; 52us; 4us; 16446us; 35us; 54us; 36us; 55us; 37us; 53us; 38us; 52us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 10us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 0us; 16416us; 9us; 32768us; 23us; 83us; 24us; 88us; 25us; 89us; 26us; 90us; 28us; 60us; 29us; 62us; 30us; 64us; 31us; 66us; 32us; 68us; 8us; 32768us; 24us; 88us; 25us; 89us; 26us; 90us; 28us; 60us; 29us; 62us; 30us; 64us; 31us; 66us; 32us; 68us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 3us; 16417us; 24us; 88us; 25us; 89us; 26us; 90us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 3us; 16418us; 24us; 88us; 25us; 89us; 26us; 90us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 3us; 16419us; 24us; 88us; 25us; 89us; 26us; 90us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 3us; 16420us; 24us; 88us; 25us; 89us; 26us; 90us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 3us; 16421us; 24us; 88us; 25us; 89us; 26us; 90us; 0us; 16422us; 0us; 16423us; 1us; 32768us; 22us; 73us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 1us; 32768us; 23us; 75us; 0us; 16424us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 4us; 32768us; 9us; 79us; 24us; 88us; 25us; 89us; 26us; 90us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 3us; 16425us; 24us; 88us; 25us; 89us; 26us; 90us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 4us; 32768us; 23us; 83us; 24us; 88us; 25us; 89us; 26us; 90us; 0us; 16426us; 2us; 16427us; 25us; 89us; 26us; 90us; 1us; 16428us; 26us; 90us; 0us; 16429us; 1us; 16430us; 26us; 90us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 8us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 81us; 25us; 91us; 41us; 94us; 42us; 93us; 44us; 70us; 0us; 16431us; 0us; 16432us; 2us; 32768us; 10us; 95us; 12us; 100us; 1us; 32768us; 42us; 96us; 0us; 16433us; 2us; 32768us; 10us; 98us; 12us; 105us; 1us; 32768us; 42us; 99us; 0us; 16434us; 2us; 32768us; 2us; 110us; 44us; 101us; 1us; 32768us; 13us; 102us; 1us; 32768us; 10us; 103us; 1us; 32768us; 42us; 104us; 0us; 16435us; 2us; 32768us; 2us; 119us; 44us; 106us; 1us; 32768us; 13us; 107us; 1us; 32768us; 10us; 108us; 1us; 32768us; 42us; 109us; 0us; 16436us; 2us; 32768us; 13us; 111us; 25us; 114us; 1us; 32768us; 10us; 112us; 1us; 32768us; 42us; 113us; 0us; 16437us; 1us; 32768us; 44us; 115us; 1us; 32768us; 13us; 116us; 1us; 32768us; 10us; 117us; 1us; 32768us; 42us; 118us; 0us; 16438us; 2us; 32768us; 13us; 120us; 25us; 123us; 1us; 32768us; 10us; 121us; 1us; 32768us; 42us; 122us; 0us; 16439us; 1us; 32768us; 44us; 124us; 1us; 32768us; 13us; 125us; 1us; 32768us; 10us; 126us; 1us; 32768us; 42us; 127us; 0us; 16440us; 1us; 16441us; 11us; 129us; 1us; 32768us; 1us; 132us; 0us; 16442us; 1us; 32768us; 12us; 133us; 1us; 32768us; 12us; 134us; 1us; 32768us; 2us; 135us; 1us; 32768us; 2us; 136us; 1us; 32768us; 13us; 137us; 1us; 32768us; 13us; 138us; 1us; 32768us; 10us; 139us; 1us; 32768us; 10us; 140us; 1us; 32768us; 42us; 141us; 1us; 32768us; 42us; 142us; 1us; 16443us; 11us; 143us; 2us; 16443us; 4us; 145us; 11us; 143us; 1us; 32768us; 1us; 131us; 0us; 16444us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; 0us; 16445us; 1us; 32768us; 5us; 148us; 11us; 32768us; 0us; 72us; 1us; 97us; 7us; 76us; 22us; 38us; 25us; 91us; 27us; 56us; 33us; 36us; 34us; 37us; 41us; 94us; 42us; 93us; 44us; 70us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 19us; 21us; 38us; 39us; 40us; 45us; 48us; 49us; 61us; 67us; 69us; 70us; 74us; 76us; 77us; 81us; 85us; 87us; 88us; 90us; 92us; 94us; 95us; 97us; 99us; 101us; 102us; 103us; 104us; 105us; 106us; 115us; 120us; 121us; 122us; 123us; 135us; 141us; 142us; 151us; 157us; 169us; 170us; 171us; 172us; 174us; 178us; 181us; 187us; 192us; 204us; 216us; 228us; 240us; 251us; 252us; 262us; 271us; 280us; 284us; 293us; 297us; 306us; 310us; 319us; 323us; 332us; 336us; 337us; 338us; 340us; 352us; 354us; 355us; 367us; 376us; 381us; 390us; 394us; 403us; 408us; 409us; 412us; 414us; 415us; 417us; 426us; 435us; 444us; 453us; 454us; 455us; 458us; 460us; 461us; 464us; 466us; 467us; 470us; 472us; 474us; 476us; 477us; 480us; 482us; 484us; 486us; 487us; 490us; 492us; 494us; 495us; 497us; 499us; 501us; 503us; 504us; 507us; 509us; 511us; 512us; 514us; 516us; 518us; 520us; 521us; 523us; 525us; 526us; 528us; 530us; 532us; 534us; 536us; 538us; 540us; 542us; 544us; 546us; 548us; 551us; 553us; 554us; 566us; 567us; 569us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 3us; 2us; 1us; 1us; 2us; 5us; 3us; 4us; 1us; 4us; 1us; 4us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 3us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 4us; 6us; 3us; 3us; 3us; 3us; 2us; 1us; 1us; 3us; 3us; 6us; 6us; 6us; 8us; 6us; 8us; 1us; 3us; 6us; 8us; 8us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 16386us; 16388us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 16397us; 16398us; 16399us; 16400us; 16401us; 65535us; 65535us; 16404us; 16405us; 16406us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16422us; 16423us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16431us; 16432us; 65535us; 65535us; 16433us; 65535us; 65535us; 16434us; 65535us; 65535us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 65535us; 16437us; 65535us; 65535us; 65535us; 65535us; 16438us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 65535us; 16440us; 65535us; 65535us; 16442us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16444us; 65535us; 16445us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 420 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Spec )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 429 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                   Spec(_1)
                   )
# 55 "Parser.fsy"
                 :  Spec ));
# 440 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                          _1::_3 
                   )
# 58 "Parser.fsy"
                 : 'Lines));
# 452 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                     [_1]   
                   )
# 59 "Parser.fsy"
                 : 'Lines));
# 463 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                      VarDecl(_1)
                   )
# 62 "Parser.fsy"
                 : 'Line));
# 474 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                     Assert(_1)
                   )
# 63 "Parser.fsy"
                 : 'Line));
# 485 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Updates)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                            UpdateDecl(Update.Create(None,_2))
                   )
# 64 "Parser.fsy"
                 : 'Line));
# 496 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Updates)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                        UpdateDecl(Update.Create(Some(_3),_5))
                   )
# 65 "Parser.fsy"
                 : 'Line));
# 508 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scope)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                VarDef.DeclareVar(_1,_2,_3)
                   )
# 71 "Parser.fsy"
                 : 'VarDecl));
# 521 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Scope)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                               VarDef.DeclareUniqueVar(_2,_3,_4)
                   )
# 72 "Parser.fsy"
                 : 'VarDecl));
# 534 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                  Int
                   )
# 75 "Parser.fsy"
                 : 'Type));
# 544 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                BInt(_3)
                   )
# 76 "Parser.fsy"
                 : 'Type));
# 555 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                  Nat
                   )
# 77 "Parser.fsy"
                 : 'Type));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                BNat(_3)
                   )
# 78 "Parser.fsy"
                 : 'Type));
# 576 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                   Bool
                   )
# 79 "Parser.fsy"
                 : 'Type));
# 586 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                System
                   )
# 82 "Parser.fsy"
                 : 'Scope));
# 596 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                               Path
                   )
# 83 "Parser.fsy"
                 : 'Scope));
# 606 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                State
                   )
# 84 "Parser.fsy"
                 : 'Scope));
# 616 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                   NExpr(_1)
                   )
# 93 "Parser.fsy"
                 : 'Expr));
# 627 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                   BExpr(_1)
                   )
# 94 "Parser.fsy"
                 : 'Expr));
# 638 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                    BTerm(BComp(_1))
                   )
# 97 "Parser.fsy"
                 : 'BTerm));
# 649 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                      BTerm(BConst(true))
                   )
# 98 "Parser.fsy"
                 : 'BTerm));
# 659 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                    BTerm(BConst(false))
                   )
# 99 "Parser.fsy"
                 : 'BTerm));
# 669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                              _2
                   )
# 100 "Parser.fsy"
                 : 'BTerm));
# 680 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                  BTerm(BVar(_1))
                   )
# 101 "Parser.fsy"
                 : 'BTerm));
# 691 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                    [_1]
                   )
# 105 "Parser.fsy"
                 : 'BExprList));
# 702 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                _1::_3
                   )
# 106 "Parser.fsy"
                 : 'BExprList));
# 714 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                   _1
                   )
# 109 "Parser.fsy"
                 : 'BExpr));
# 725 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                   Beq(_1,_3)
                   )
# 110 "Parser.fsy"
                 : 'BExpr));
# 737 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                              Imp(_1,_3)
                   )
# 111 "Parser.fsy"
                 : 'BExpr));
# 749 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                              And(_1,_3)
                   )
# 112 "Parser.fsy"
                 : 'BExpr));
# 761 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                             Or(_1,_3)
                   )
# 113 "Parser.fsy"
                 : 'BExpr));
# 773 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                          Not(_2)
                   )
# 114 "Parser.fsy"
                 : 'BExpr));
# 784 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                             Gt(_1,_3)
                   )
# 117 "Parser.fsy"
                 : 'CExpr));
# 796 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                              Ge(_1,_3)
                   )
# 118 "Parser.fsy"
                 : 'CExpr));
# 808 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                          Lt(_1,_3)
                   )
# 119 "Parser.fsy"
                 : 'CExpr));
# 820 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                          Le(_1,_3)
                   )
# 120 "Parser.fsy"
                 : 'CExpr));
# 832 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                          Eq(_1,_3)
                   )
# 121 "Parser.fsy"
                 : 'CExpr));
# 844 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                       NConst(_1)
                   )
# 125 "Parser.fsy"
                 : 'NTerm));
# 855 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                     NVar(_1)
                   )
# 126 "Parser.fsy"
                 : 'NTerm));
# 866 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                        Card(_3)
                   )
# 127 "Parser.fsy"
                 : 'NTerm));
# 877 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                         Ite(_2,_4,_6)
                   )
# 128 "Parser.fsy"
                 : 'NTerm));
# 890 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                 _2
                   )
# 131 "Parser.fsy"
                 : 'NExpr));
# 901 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                   Add(_1, _3) 
                   )
# 132 "Parser.fsy"
                 : 'NExpr));
# 913 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                   Sub(_1, _3) 
                   )
# 133 "Parser.fsy"
                 : 'NExpr));
# 925 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                 Mul(_1, _3) 
                   )
# 134 "Parser.fsy"
                 : 'NExpr));
# 937 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'NExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                           Neg(_2)
                   )
# 135 "Parser.fsy"
                 : 'NExpr));
# 948 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                       NTerm(_1)
                   )
# 136 "Parser.fsy"
                 : 'NExpr));
# 959 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                       SysVar(_1)
                   )
# 139 "Parser.fsy"
                 : 'Var));
# 970 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                 PathVar(_1,_3)
                   )
# 140 "Parser.fsy"
                 : 'Var));
# 982 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                            AbsPathVar(_3)
                   )
# 141 "Parser.fsy"
                 : 'Var));
# 993 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                              StateVar(_1,_3,_6)
                   )
# 142 "Parser.fsy"
                 : 'Var));
# 1006 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                         AbsPStateVar(_3,_6)
                   )
# 143 "Parser.fsy"
                 : 'Var));
# 1018 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                           AbsKStateVar(_1,0,_6)
                   )
# 144 "Parser.fsy"
                 : 'Var));
# 1030 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                                    AbsKStateVar(_1,-_5,_8)
                   )
# 145 "Parser.fsy"
                 : 'Var));
# 1043 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                      AbsStateVar(0,_6)
                   )
# 146 "Parser.fsy"
                 : 'Var));
# 1054 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                               AbsStateVar(-_5,_8)
                   )
# 147 "Parser.fsy"
                 : 'Var));
# 1066 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'UpdateR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                    [_1]   
                   )
# 155 "Parser.fsy"
                 : 'Updates));
# 1077 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'UpdateR)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Updates)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                               _1::_3 
                   )
# 156 "Parser.fsy"
                 : 'Updates));
# 1089 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                    [_6]
                   )
# 160 "Parser.fsy"
                 : 'VarList));
# 1100 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                               _6::_8
                   )
# 161 "Parser.fsy"
                 : 'VarList));
# 1112 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                            UpdateRule.Create(_6,_8)
                   )
# 164 "Parser.fsy"
                 : 'UpdateR));
# 1124 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                 UpdateRule.CreateRelation(_1,_3)
                   )
# 165 "Parser.fsy"
                 : 'UpdateR));
|]
# 1137 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Spec  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
