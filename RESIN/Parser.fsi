// Signature file for parser generated by fsyacc
module Microsoft.Research.RESIN.Parser
type token = 
  | EOF
  | EOL
  | POS
  | NEG
  | TO
  | COMMA
  | PLUS
  | MINUS
  | OPT
  | IMPLIES
  | EQ
  | SWITCH
  | AND
  | OR
  | TRUE
  | FALSE
  | NOT
  | DIRECTIVE
  | AT
  | LPAREN
  | RPAREN
  | LBRA
  | RBRA
  | LSBRA
  | RSBRA
  | DOT
  | LET
  | ASSIGN
  | UNDER
  | DEFINE
  | SYNC
  | ASYNC
  | ALLOW
  | FIXED
  | DESCRIPTION of (System.String)
  | CELL of (System.String)
  | PATH of (System.String)
  | NAME of (System.String)
  | SPECIES of (System.String)
  | BOOL of (System.Boolean)
  | INT32 of (System.Int32)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EOL
    | TOKEN_POS
    | TOKEN_NEG
    | TOKEN_TO
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_OPT
    | TOKEN_IMPLIES
    | TOKEN_EQ
    | TOKEN_SWITCH
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_DIRECTIVE
    | TOKEN_AT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_LSBRA
    | TOKEN_RSBRA
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_ASSIGN
    | TOKEN_UNDER
    | TOKEN_DEFINE
    | TOKEN_SYNC
    | TOKEN_ASYNC
    | TOKEN_ALLOW
    | TOKEN_FIXED
    | TOKEN_DESCRIPTION
    | TOKEN_CELL
    | TOKEN_PATH
    | TOKEN_NAME
    | TOKEN_SPECIES
    | TOKEN_BOOL
    | TOKEN_INT32
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Lines
    | NONTERM_Line
    | NONTERM_Interactions
    | NONTERM_Interaction
    | NONTERM_Species
    | NONTERM_Ints
    | NONTERM_BTerm
    | NONTERM_BExpr
    | NONTERM_CoTerm
    | NONTERM_CoExpr
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( Line list) 
