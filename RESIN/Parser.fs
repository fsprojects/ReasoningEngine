// Implementation file for parser generated by fsyacc
module Microsoft.Research.RESIN.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Microsoft.Research.ReasoningEngine.Constraint
open Microsoft.Research.ReasoningEngine.Var
open System.Collections.Generic



//arithmetic term
type Line = 
    |Assign of string * BExpr
    |Sync of bool // synchronous update?  
    |Assert of string * int * BExpr  * string * bool //experiment * step * expression * description * asyncFlag    
    |Species of string * int list * bool * bool //name * allowed logics * KO? * FE?
    |Cell of string * (string * string * bool * bool) seq // name * interactions; interactions are source * target * positive? * definite? * id
    |Switch of string * string * BExpr// cell name 1 * cell name 2 * condition 
    

# 25 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | EOL
  | POS
  | NEG
  | TO
  | COMMA
  | PLUS
  | MINUS
  | OPT
  | IMPLIES
  | EQ
  | SWITCH
  | AND
  | OR
  | TRUE
  | FALSE
  | NOT
  | DIRECTIVE
  | AT
  | LPAREN
  | RPAREN
  | LBRA
  | RBRA
  | LSBRA
  | RSBRA
  | DOT
  | LET
  | ASSIGN
  | UNDER
  | DEFINE
  | SYNC
  | ASYNC
  | ALLOW
  | FIXED
  | DESCRIPTION of (System.String)
  | CELL of (System.String)
  | PATH of (System.String)
  | NAME of (System.String)
  | SPECIES of (System.String)
  | BOOL of (System.Boolean)
  | INT32 of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EOL
    | TOKEN_POS
    | TOKEN_NEG
    | TOKEN_TO
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_OPT
    | TOKEN_IMPLIES
    | TOKEN_EQ
    | TOKEN_SWITCH
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_DIRECTIVE
    | TOKEN_AT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_LSBRA
    | TOKEN_RSBRA
    | TOKEN_DOT
    | TOKEN_LET
    | TOKEN_ASSIGN
    | TOKEN_UNDER
    | TOKEN_DEFINE
    | TOKEN_SYNC
    | TOKEN_ASYNC
    | TOKEN_ALLOW
    | TOKEN_FIXED
    | TOKEN_DESCRIPTION
    | TOKEN_CELL
    | TOKEN_PATH
    | TOKEN_NAME
    | TOKEN_SPECIES
    | TOKEN_BOOL
    | TOKEN_INT32
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Lines
    | NONTERM_Line
    | NONTERM_Interactions
    | NONTERM_Interaction
    | NONTERM_Species
    | NONTERM_Ints
    | NONTERM_BTerm
    | NONTERM_BExpr
    | NONTERM_CoTerm
    | NONTERM_CoExpr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | EOL  -> 1 
  | POS  -> 2 
  | NEG  -> 3 
  | TO  -> 4 
  | COMMA  -> 5 
  | PLUS  -> 6 
  | MINUS  -> 7 
  | OPT  -> 8 
  | IMPLIES  -> 9 
  | EQ  -> 10 
  | SWITCH  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | TRUE  -> 14 
  | FALSE  -> 15 
  | NOT  -> 16 
  | DIRECTIVE  -> 17 
  | AT  -> 18 
  | LPAREN  -> 19 
  | RPAREN  -> 20 
  | LBRA  -> 21 
  | RBRA  -> 22 
  | LSBRA  -> 23 
  | RSBRA  -> 24 
  | DOT  -> 25 
  | LET  -> 26 
  | ASSIGN  -> 27 
  | UNDER  -> 28 
  | DEFINE  -> 29 
  | SYNC  -> 30 
  | ASYNC  -> 31 
  | ALLOW  -> 32 
  | FIXED  -> 33 
  | DESCRIPTION _ -> 34 
  | CELL _ -> 35 
  | PATH _ -> 36 
  | NAME _ -> 37 
  | SPECIES _ -> 38 
  | BOOL _ -> 39 
  | INT32 _ -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_EOL 
  | 2 -> TOKEN_POS 
  | 3 -> TOKEN_NEG 
  | 4 -> TOKEN_TO 
  | 5 -> TOKEN_COMMA 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_OPT 
  | 9 -> TOKEN_IMPLIES 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_SWITCH 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_TRUE 
  | 15 -> TOKEN_FALSE 
  | 16 -> TOKEN_NOT 
  | 17 -> TOKEN_DIRECTIVE 
  | 18 -> TOKEN_AT 
  | 19 -> TOKEN_LPAREN 
  | 20 -> TOKEN_RPAREN 
  | 21 -> TOKEN_LBRA 
  | 22 -> TOKEN_RBRA 
  | 23 -> TOKEN_LSBRA 
  | 24 -> TOKEN_RSBRA 
  | 25 -> TOKEN_DOT 
  | 26 -> TOKEN_LET 
  | 27 -> TOKEN_ASSIGN 
  | 28 -> TOKEN_UNDER 
  | 29 -> TOKEN_DEFINE 
  | 30 -> TOKEN_SYNC 
  | 31 -> TOKEN_ASYNC 
  | 32 -> TOKEN_ALLOW 
  | 33 -> TOKEN_FIXED 
  | 34 -> TOKEN_DESCRIPTION 
  | 35 -> TOKEN_CELL 
  | 36 -> TOKEN_PATH 
  | 37 -> TOKEN_NAME 
  | 38 -> TOKEN_SPECIES 
  | 39 -> TOKEN_BOOL 
  | 40 -> TOKEN_INT32 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Lines 
    | 3 -> NONTERM_Lines 
    | 4 -> NONTERM_Line 
    | 5 -> NONTERM_Line 
    | 6 -> NONTERM_Line 
    | 7 -> NONTERM_Line 
    | 8 -> NONTERM_Line 
    | 9 -> NONTERM_Line 
    | 10 -> NONTERM_Line 
    | 11 -> NONTERM_Line 
    | 12 -> NONTERM_Line 
    | 13 -> NONTERM_Line 
    | 14 -> NONTERM_Line 
    | 15 -> NONTERM_Line 
    | 16 -> NONTERM_Line 
    | 17 -> NONTERM_Line 
    | 18 -> NONTERM_Line 
    | 19 -> NONTERM_Interactions 
    | 20 -> NONTERM_Interactions 
    | 21 -> NONTERM_Interaction 
    | 22 -> NONTERM_Interaction 
    | 23 -> NONTERM_Interaction 
    | 24 -> NONTERM_Interaction 
    | 25 -> NONTERM_Species 
    | 26 -> NONTERM_Species 
    | 27 -> NONTERM_Species 
    | 28 -> NONTERM_Species 
    | 29 -> NONTERM_Species 
    | 30 -> NONTERM_Ints 
    | 31 -> NONTERM_Ints 
    | 32 -> NONTERM_Ints 
    | 33 -> NONTERM_Ints 
    | 34 -> NONTERM_BTerm 
    | 35 -> NONTERM_BTerm 
    | 36 -> NONTERM_BTerm 
    | 37 -> NONTERM_BTerm 
    | 38 -> NONTERM_BTerm 
    | 39 -> NONTERM_BTerm 
    | 40 -> NONTERM_BTerm 
    | 41 -> NONTERM_BTerm 
    | 42 -> NONTERM_BTerm 
    | 43 -> NONTERM_BExpr 
    | 44 -> NONTERM_BExpr 
    | 45 -> NONTERM_BExpr 
    | 46 -> NONTERM_BExpr 
    | 47 -> NONTERM_BExpr 
    | 48 -> NONTERM_BExpr 
    | 49 -> NONTERM_BExpr 
    | 50 -> NONTERM_BExpr 
    | 51 -> NONTERM_CoTerm 
    | 52 -> NONTERM_CoTerm 
    | 53 -> NONTERM_CoTerm 
    | 54 -> NONTERM_CoTerm 
    | 55 -> NONTERM_CoExpr 
    | 56 -> NONTERM_CoExpr 
    | 57 -> NONTERM_CoExpr 
    | 58 -> NONTERM_CoExpr 
    | 59 -> NONTERM_CoExpr 
    | 60 -> NONTERM_CoExpr 
    | 61 -> NONTERM_CoExpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | EOL  -> "EOL" 
  | POS  -> "POS" 
  | NEG  -> "NEG" 
  | TO  -> "TO" 
  | COMMA  -> "COMMA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | OPT  -> "OPT" 
  | IMPLIES  -> "IMPLIES" 
  | EQ  -> "EQ" 
  | SWITCH  -> "SWITCH" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NOT  -> "NOT" 
  | DIRECTIVE  -> "DIRECTIVE" 
  | AT  -> "AT" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | LSBRA  -> "LSBRA" 
  | RSBRA  -> "RSBRA" 
  | DOT  -> "DOT" 
  | LET  -> "LET" 
  | ASSIGN  -> "ASSIGN" 
  | UNDER  -> "UNDER" 
  | DEFINE  -> "DEFINE" 
  | SYNC  -> "SYNC" 
  | ASYNC  -> "ASYNC" 
  | ALLOW  -> "ALLOW" 
  | FIXED  -> "FIXED" 
  | DESCRIPTION _ -> "DESCRIPTION" 
  | CELL _ -> "CELL" 
  | PATH _ -> "PATH" 
  | NAME _ -> "NAME" 
  | SPECIES _ -> "SPECIES" 
  | BOOL _ -> "BOOL" 
  | INT32 _ -> "INT32" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | EOL  -> (null : System.Object) 
  | POS  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | OPT  -> (null : System.Object) 
  | IMPLIES  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | DIRECTIVE  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | LSBRA  -> (null : System.Object) 
  | RSBRA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | UNDER  -> (null : System.Object) 
  | DEFINE  -> (null : System.Object) 
  | SYNC  -> (null : System.Object) 
  | ASYNC  -> (null : System.Object) 
  | ALLOW  -> (null : System.Object) 
  | FIXED  -> (null : System.Object) 
  | DESCRIPTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CELL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SPECIES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 3us; 4us; 3us; 2us; 65535us; 23us; 24us; 45us; 46us; 2us; 65535us; 23us; 44us; 45us; 44us; 2us; 65535us; 0us; 43us; 4us; 43us; 7us; 65535us; 54us; 55us; 60us; 61us; 65us; 66us; 70us; 71us; 75us; 76us; 79us; 80us; 83us; 84us; 13us; 65535us; 0us; 105us; 4us; 105us; 10us; 105us; 14us; 105us; 33us; 105us; 37us; 105us; 40us; 105us; 102us; 105us; 113us; 105us; 114us; 105us; 115us; 105us; 116us; 105us; 117us; 105us; 13us; 65535us; 0us; 30us; 4us; 30us; 10us; 11us; 14us; 17us; 33us; 34us; 37us; 38us; 40us; 41us; 102us; 103us; 113us; 108us; 114us; 109us; 115us; 110us; 116us; 111us; 117us; 112us; 19us; 65535us; 0us; 125us; 4us; 125us; 10us; 125us; 14us; 125us; 33us; 125us; 37us; 125us; 40us; 125us; 102us; 125us; 113us; 125us; 114us; 125us; 115us; 125us; 116us; 125us; 117us; 125us; 122us; 125us; 131us; 125us; 132us; 125us; 133us; 125us; 134us; 125us; 135us; 125us; 19us; 65535us; 0us; 106us; 4us; 106us; 10us; 106us; 14us; 106us; 33us; 106us; 37us; 106us; 40us; 106us; 102us; 106us; 113us; 106us; 114us; 106us; 115us; 106us; 116us; 106us; 117us; 107us; 122us; 123us; 131us; 126us; 132us; 127us; 133us; 128us; 134us; 129us; 135us; 130us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 12us; 15us; 18us; 26us; 40us; 54us; 74us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 2us; 2us; 3us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 5us; 4us; 46us; 47us; 48us; 49us; 1us; 4us; 2us; 5us; 6us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 5us; 6us; 46us; 47us; 48us; 49us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 2us; 8us; 9us; 2us; 8us; 9us; 1us; 8us; 1us; 9us; 6us; 10us; 11us; 46us; 47us; 48us; 49us; 1us; 11us; 6us; 12us; 13us; 14us; 15us; 16us; 17us; 6us; 12us; 13us; 14us; 15us; 16us; 17us; 6us; 12us; 13us; 46us; 47us; 48us; 49us; 1us; 13us; 4us; 14us; 15us; 16us; 17us; 4us; 14us; 15us; 16us; 17us; 6us; 14us; 15us; 46us; 47us; 48us; 49us; 1us; 15us; 2us; 16us; 17us; 6us; 16us; 17us; 46us; 47us; 48us; 49us; 1us; 17us; 1us; 18us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 20us; 4us; 21us; 22us; 23us; 24us; 4us; 21us; 22us; 23us; 24us; 2us; 21us; 23us; 2us; 22us; 24us; 1us; 23us; 1us; 24us; 8us; 25us; 26us; 27us; 28us; 29us; 37us; 39us; 54us; 1us; 25us; 1us; 25us; 1us; 25us; 5us; 26us; 27us; 28us; 29us; 39us; 2us; 26us; 28us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 2us; 27us; 29us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 4us; 30us; 31us; 32us; 33us; 1us; 30us; 1us; 30us; 2us; 32us; 33us; 2us; 32us; 33us; 1us; 33us; 1us; 33us; 2us; 34us; 51us; 2us; 35us; 52us; 2us; 36us; 53us; 3us; 37us; 39us; 54us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 2us; 40us; 41us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 43us; 5us; 43us; 46us; 47us; 48us; 49us; 1us; 43us; 1us; 44us; 5us; 45us; 57us; 58us; 59us; 60us; 6us; 45us; 57us; 58us; 59us; 60us; 61us; 5us; 46us; 46us; 47us; 48us; 49us; 5us; 46us; 47us; 47us; 48us; 49us; 5us; 46us; 47us; 48us; 48us; 49us; 5us; 46us; 47us; 48us; 49us; 49us; 5us; 46us; 47us; 48us; 49us; 50us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 2us; 50us; 61us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 5us; 55us; 57us; 58us; 59us; 60us; 1us; 55us; 1us; 56us; 5us; 57us; 57us; 58us; 59us; 60us; 5us; 57us; 58us; 58us; 59us; 60us; 5us; 57us; 58us; 59us; 59us; 60us; 5us; 57us; 58us; 59us; 60us; 60us; 5us; 57us; 58us; 59us; 60us; 61us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 30us; 32us; 35us; 38us; 40us; 42us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 67us; 70us; 72us; 74us; 81us; 83us; 90us; 97us; 104us; 106us; 111us; 116us; 123us; 125us; 128us; 135us; 137us; 139us; 142us; 145us; 147us; 152us; 157us; 160us; 163us; 165us; 167us; 176us; 178us; 180us; 182us; 188us; 191us; 193us; 195us; 197us; 199us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 235us; 237us; 239us; 242us; 245us; 247us; 249us; 252us; 255us; 258us; 262us; 264us; 266us; 268us; 270us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; 297us; 299us; 301us; 307us; 314us; 320us; 326us; 332us; 338us; 344us; 346us; 348us; 350us; 352us; 355us; 357us; 359us; 361us; 363us; 365us; 371us; 373us; 375us; 381us; 387us; 393us; 399us; 405us; 407us; 409us; 411us; 413us; |]
let _fsyacc_action_rows = 136
let _fsyacc_actionTableElements = [|15us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 17us; 26us; 19us; 102us; 23us; 122us; 26us; 7us; 28us; 32us; 29us; 20us; 32us; 13us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 53us; 40us; 87us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 1us; 4us; 16us; 32768us; 0us; 6us; 14us; 85us; 15us; 86us; 16us; 117us; 17us; 26us; 19us; 102us; 23us; 122us; 26us; 7us; 28us; 32us; 29us; 20us; 32us; 13us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 53us; 40us; 87us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 37us; 8us; 1us; 32768us; 27us; 9us; 1us; 32768us; 21us; 10us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 5us; 32768us; 9us; 114us; 10us; 113us; 12us; 115us; 13us; 116us; 22us; 12us; 0us; 16388us; 1us; 32768us; 35us; 14us; 11us; 32768us; 11us; 15us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 1us; 32768us; 35us; 16us; 0us; 16389us; 5us; 32768us; 9us; 114us; 10us; 113us; 11us; 18us; 12us; 115us; 13us; 116us; 1us; 32768us; 35us; 19us; 0us; 16390us; 1us; 32768us; 35us; 21us; 1us; 32768us; 27us; 22us; 1us; 32768us; 21us; 23us; 1us; 32768us; 38us; 47us; 1us; 32768us; 22us; 25us; 0us; 16391us; 1us; 32768us; 10us; 27us; 2us; 32768us; 30us; 28us; 31us; 29us; 0us; 16392us; 0us; 16393us; 5us; 16394us; 9us; 114us; 10us; 113us; 12us; 115us; 13us; 116us; 34us; 31us; 0us; 16395us; 1us; 32768us; 36us; 33us; 11us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 18us; 36us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 5us; 16396us; 9us; 114us; 10us; 113us; 12us; 115us; 13us; 116us; 34us; 35us; 0us; 16397us; 1us; 32768us; 40us; 37us; 11us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 33us; 40us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 5us; 16398us; 9us; 114us; 10us; 113us; 12us; 115us; 13us; 116us; 34us; 39us; 0us; 16399us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 5us; 16400us; 9us; 114us; 10us; 113us; 12us; 115us; 13us; 116us; 34us; 42us; 0us; 16401us; 0us; 16402us; 1us; 32768us; 1us; 45us; 1us; 16403us; 38us; 47us; 0us; 16404us; 1us; 32768us; 38us; 48us; 2us; 32768us; 2us; 49us; 3us; 50us; 1us; 16405us; 8us; 51us; 1us; 16406us; 8us; 52us; 0us; 16407us; 0us; 16408us; 2us; 16421us; 19us; 54us; 23us; 57us; 1us; 32768us; 40us; 78us; 1us; 32768us; 20us; 56us; 0us; 16409us; 3us; 32768us; 6us; 63us; 7us; 58us; 40us; 91us; 2us; 32768us; 6us; 68us; 24us; 59us; 1us; 32768us; 19us; 60us; 1us; 32768us; 40us; 78us; 1us; 32768us; 20us; 62us; 0us; 16410us; 2us; 32768us; 7us; 73us; 24us; 64us; 1us; 32768us; 19us; 65us; 1us; 32768us; 40us; 78us; 1us; 32768us; 20us; 67us; 0us; 16411us; 1us; 32768us; 24us; 69us; 1us; 32768us; 19us; 70us; 1us; 32768us; 40us; 78us; 1us; 32768us; 20us; 72us; 0us; 16412us; 1us; 32768us; 24us; 74us; 1us; 32768us; 19us; 75us; 1us; 32768us; 40us; 78us; 1us; 32768us; 20us; 77us; 0us; 16413us; 2us; 16415us; 4us; 81us; 5us; 79us; 1us; 32768us; 40us; 78us; 0us; 16414us; 1us; 32768us; 40us; 82us; 1us; 16416us; 5us; 83us; 1us; 32768us; 40us; 78us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 1us; 16421us; 23us; 90us; 0us; 16422us; 1us; 32768us; 40us; 91us; 1us; 32768us; 24us; 92us; 0us; 16423us; 2us; 32768us; 23us; 96us; 25us; 94us; 1us; 32768us; 38us; 95us; 0us; 16424us; 1us; 32768us; 40us; 97us; 1us; 32768us; 24us; 98us; 1us; 32768us; 25us; 99us; 1us; 32768us; 38us; 100us; 0us; 16425us; 0us; 16426us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 5us; 32768us; 9us; 114us; 10us; 113us; 12us; 115us; 13us; 116us; 20us; 104us; 0us; 16427us; 0us; 16428us; 4us; 16429us; 9us; 132us; 10us; 131us; 12us; 133us; 13us; 134us; 4us; 16429us; 9us; 132us; 10us; 131us; 12us; 133us; 13us; 134us; 0us; 16430us; 1us; 16431us; 10us; 113us; 3us; 16432us; 9us; 114us; 10us; 113us; 13us; 116us; 2us; 16433us; 9us; 114us; 10us; 113us; 4us; 16434us; 9us; 114us; 10us; 113us; 12us; 115us; 13us; 116us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 10us; 32768us; 14us; 85us; 15us; 86us; 16us; 117us; 19us; 102us; 23us; 122us; 35us; 89us; 36us; 93us; 37us; 101us; 38us; 88us; 40us; 87us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 6us; 32768us; 14us; 118us; 15us; 119us; 16us; 135us; 23us; 122us; 38us; 121us; 40us; 120us; 5us; 32768us; 9us; 132us; 10us; 131us; 12us; 133us; 13us; 134us; 24us; 124us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 1us; 16442us; 10us; 131us; 3us; 16443us; 9us; 132us; 10us; 131us; 13us; 134us; 2us; 16444us; 9us; 132us; 10us; 131us; 4us; 16445us; 9us; 132us; 10us; 131us; 12us; 133us; 13us; 134us; 6us; 32768us; 14us; 118us; 15us; 119us; 16us; 135us; 23us; 122us; 38us; 121us; 40us; 120us; 6us; 32768us; 14us; 118us; 15us; 119us; 16us; 135us; 23us; 122us; 38us; 121us; 40us; 120us; 6us; 32768us; 14us; 118us; 15us; 119us; 16us; 135us; 23us; 122us; 38us; 121us; 40us; 120us; 6us; 32768us; 14us; 118us; 15us; 119us; 16us; 135us; 23us; 122us; 38us; 121us; 40us; 120us; 6us; 32768us; 14us; 118us; 15us; 119us; 16us; 135us; 23us; 122us; 38us; 121us; 40us; 120us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 16us; 17us; 18us; 20us; 37us; 38us; 39us; 41us; 43us; 45us; 56us; 62us; 63us; 65us; 77us; 79us; 80us; 86us; 88us; 89us; 91us; 93us; 95us; 97us; 99us; 100us; 102us; 105us; 106us; 107us; 113us; 114us; 116us; 128us; 134us; 135us; 137us; 149us; 155us; 156us; 167us; 173us; 174us; 175us; 177us; 179us; 180us; 182us; 185us; 187us; 189us; 190us; 191us; 194us; 196us; 198us; 199us; 203us; 206us; 208us; 210us; 212us; 213us; 216us; 218us; 220us; 222us; 223us; 225us; 227us; 229us; 231us; 232us; 234us; 236us; 238us; 240us; 241us; 244us; 246us; 247us; 249us; 251us; 253us; 254us; 255us; 256us; 257us; 259us; 260us; 262us; 264us; 265us; 268us; 270us; 271us; 273us; 275us; 277us; 279us; 280us; 281us; 292us; 298us; 299us; 300us; 305us; 310us; 311us; 313us; 317us; 320us; 325us; 336us; 347us; 358us; 369us; 380us; 381us; 382us; 383us; 384us; 391us; 397us; 398us; 399us; 400us; 402us; 406us; 409us; 414us; 421us; 428us; 435us; 442us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 3us; 3us; 6us; 4us; 5us; 6us; 3us; 3us; 1us; 2us; 3us; 4us; 5us; 6us; 6us; 7us; 1us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 7us; 7us; 8us; 8us; 3us; 1us; 3us; 5us; 1us; 1us; 1us; 1us; 1us; 4us; 3us; 6us; 1us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 3us; 3us; 3us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16392us; 16393us; 65535us; 16395us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 16401us; 16402us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 16407us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 16423us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 16425us; 16426us; 65535us; 65535us; 16427us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 16436us; 16437us; 16438us; 65535us; 65535us; 16439us; 16440us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 392 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Line list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 401 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                   _1
                   )
# 55 "Parser.fsy"
                 :  Line list));
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                          _1::_3 
                   )
# 58 "Parser.fsy"
                 : 'Lines));
# 424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Line)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                        [_1]   
                   )
# 59 "Parser.fsy"
                 : 'Lines));
# 435 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                         Assign(_2,_5)
                   )
# 62 "Parser.fsy"
                 : 'Line));
# 447 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                               Switch(_2,_4, BTerm(BConst(true)))
                   )
# 63 "Parser.fsy"
                 : 'Line));
# 459 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                     Switch(_2,_5,_3)
                   )
# 64 "Parser.fsy"
                 : 'Line));
# 472 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interactions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                   Cell(_2,_5)
                   )
# 65 "Parser.fsy"
                 : 'Line));
# 484 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                          Sync(true)
                   )
# 66 "Parser.fsy"
                 : 'Line));
# 494 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                           Sync(false)
                   )
# 67 "Parser.fsy"
                 : 'Line));
# 504 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                       Assert("default",-1,_1,"", false)     
                   )
# 68 "Parser.fsy"
                 : 'Line));
# 515 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                Assert("default",-1,_1,_2, false)     
                   )
# 69 "Parser.fsy"
                 : 'Line));
# 527 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                               Assert(_2,-1,_3,"", false)     
                   )
# 70 "Parser.fsy"
                 : 'Line));
# 539 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                        Assert(_2,-1,_3,_4, false)     
                   )
# 71 "Parser.fsy"
                 : 'Line));
# 552 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                        Assert(_2,_4,_5,"", false)     
                   )
# 72 "Parser.fsy"
                 : 'Line));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                                 Assert(_2,_4,_5,_6, false)     
                   )
# 73 "Parser.fsy"
                 : 'Line));
# 579 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                              Assert(_2,_4,_6,"", true) 
                   )
# 74 "Parser.fsy"
                 : 'Line));
# 592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                                       Assert(_2,_4,_6,_7, true)
                   )
# 75 "Parser.fsy"
                 : 'Line));
# 606 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Species)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                      _1
                   )
# 76 "Parser.fsy"
                 : 'Line));
# 617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interaction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                            [_1]
                   )
# 80 "Parser.fsy"
                 : 'Interactions));
# 628 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interaction)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Interactions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                      _1::_3
                   )
# 81 "Parser.fsy"
                 : 'Interactions));
# 640 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                              (_1,_2,true,true)
                   )
# 84 "Parser.fsy"
                 : 'Interaction));
# 652 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                              (_1,_2,false,true)
                   )
# 85 "Parser.fsy"
                 : 'Interaction));
# 664 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                 (_1,_2,true,false)
                   )
# 86 "Parser.fsy"
                 : 'Interaction));
# 676 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                 (_1,_2,false,false)
                   )
# 87 "Parser.fsy"
                 : 'Interaction));
# 688 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                    Species(_1,_3,false,false)
                   )
# 90 "Parser.fsy"
                 : 'Species));
# 700 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                                      Species(_1,_6,true,false)
                   )
# 91 "Parser.fsy"
                 : 'Species));
# 712 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                     Species(_1,_6,false,true)
                   )
# 92 "Parser.fsy"
                 : 'Species));
# 724 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                           Species(_1,_7,true,true)
                   )
# 93 "Parser.fsy"
                 : 'Species));
# 736 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                           Species(_1,_7,true,true)
                   )
# 94 "Parser.fsy"
                 : 'Species));
# 748 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                            _1::_3
                   )
# 97 "Parser.fsy"
                 : 'Ints));
# 760 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                    [_1]
                   )
# 98 "Parser.fsy"
                 : 'Ints));
# 771 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                          [_1.._3]
                   )
# 99 "Parser.fsy"
                 : 'Ints));
# 783 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                   List.append([_1.._3]) _5
                   )
# 100 "Parser.fsy"
                 : 'Ints));
# 796 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                      BConst(true)
                   )
# 103 "Parser.fsy"
                 : 'BTerm));
# 806 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                    BConst(false)
                   )
# 104 "Parser.fsy"
                 : 'BTerm));
# 816 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                    if _1>0 then BConst(true) else BConst(false)
                   )
# 105 "Parser.fsy"
                 : 'BTerm));
# 827 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                     BVar(AbsStateVar(0,_1))
                   )
# 106 "Parser.fsy"
                 : 'BTerm));
# 838 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                   BVar(AbsStateVar(0,_1))
                   )
# 107 "Parser.fsy"
                 : 'BTerm));
# 849 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                   BVar(StateVar("default",_3,_1))
                   )
# 108 "Parser.fsy"
                 : 'BTerm));
# 861 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                            BVar(AbsKStateVar(_1,0,_3))
                   )
# 109 "Parser.fsy"
                 : 'BTerm));
# 873 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                             BVar(StateVar(_1,_3,_6))
                   )
# 110 "Parser.fsy"
                 : 'BTerm));
# 886 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                   Predicate(AbsPred(_1))
                   )
# 111 "Parser.fsy"
                 : 'BTerm));
# 897 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                              _2
                   )
# 115 "Parser.fsy"
                 : 'BExpr));
# 908 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                   BTerm(_1)
                   )
# 116 "Parser.fsy"
                 : 'BExpr));
# 919 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                   _1
                   )
# 117 "Parser.fsy"
                 : 'BExpr));
# 930 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                             Beq(_1,_3)
                   )
# 118 "Parser.fsy"
                 : 'BExpr));
# 942 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                              Imp(_1,_3)
                   )
# 119 "Parser.fsy"
                 : 'BExpr));
# 954 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                              And(_1,_3)
                   )
# 120 "Parser.fsy"
                 : 'BExpr));
# 966 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                             Or(_1,_3)
                   )
# 121 "Parser.fsy"
                 : 'BExpr));
# 978 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                          Not(_2)
                   )
# 122 "Parser.fsy"
                 : 'BExpr));
# 989 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                      BConst(true)
                   )
# 126 "Parser.fsy"
                 : 'CoTerm));
# 999 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                    BConst(false)
                   )
# 127 "Parser.fsy"
                 : 'CoTerm));
# 1009 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                    if _1>0 then BConst(true) else BConst(false)
                   )
# 128 "Parser.fsy"
                 : 'CoTerm));
# 1020 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                     BVar(AbsStateVar(-1,_1))
                   )
# 129 "Parser.fsy"
                 : 'CoTerm));
# 1031 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                   _2
                   )
# 132 "Parser.fsy"
                 : 'CoExpr));
# 1042 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoTerm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                   BTerm(_1)
                   )
# 133 "Parser.fsy"
                 : 'CoExpr));
# 1053 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                               Beq(_1,_3)
                   )
# 134 "Parser.fsy"
                 : 'CoExpr));
# 1065 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                Imp(_1,_3)
                   )
# 135 "Parser.fsy"
                 : 'CoExpr));
# 1077 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                And(_1,_3)
                   )
# 136 "Parser.fsy"
                 : 'CoExpr));
# 1089 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                               Or(_1,_3)
                   )
# 137 "Parser.fsy"
                 : 'CoExpr));
# 1101 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CoExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                          Not(_2)
                   )
# 138 "Parser.fsy"
                 : 'CoExpr));
|]
# 1113 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Line list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
