{
module Microsoft.Research.RESIN.Lexer
open System
open Parser
open FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}

// These are some regular expression definitions
let digit = ['0'-'9']
let alpha = ['0'-'9' 'a'-'z' 'A'-'Z' '_']
let whitespace = [' ' '\t']
let newline = ('\n' | '\r' | '\r' '\n')
let comment = ("//" ['0'-'9' 'a'-'z' 'A'-'Z' '_' '-' '\t' ' ' ':' '%' '$' '£' '*' '(' ')' '[' ']' ';' '#' '|' '=' '"' '\r']* )
let description = ('"' ['0'-'9' 'a'-'z' 'A'-'Z' '_' '-' '\t' ' ' ',' '.' '(' ')' '%' '$' '\n' '\r' '+']* '"')

rule tokenize = parse
| whitespace	{ tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
| comment		{ lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }

//keywords
| "at"				{AT         }
| "under"			{UNDER      }
| "directive"       {DIRECTIVE     }
| "allow"           {ALLOW}
| "fixed"           {FIXED}

//text info
| description  {DESCRIPTION (lexeme lexbuf)}

| "sync"		{SYNC}
| "async"		{ASYNC}
| "positive"	{POS}
| "negative"	{NEG}
| "optional"    {OPT}
| ".."			{TO}
| ","			{COMMA}
| "+"			{PLUS}
| "-"			{MINUS}
| "->"          {SWITCH}


//other symbols (make sure species are parsed already
| "let"			{LET}
| "define"		{DEFINE}
| ":="			{ASSIGN}
| "{"			{LBRA}
| "}"			{RBRA}
| "["			{LSBRA}
| "]"			{RSBRA}
| "."			{DOT}

// Logical
| "true"			{TRUE}
| "false"			{FALSE}
| "!"
| "not"			{NOT}
| "&"
| "and"			{AND}
| "|"
| "or"			{OR}
| "=>"
| "implies"		{IMPLIES}
| "="			{EQ}

// Misc
| "("			{ LPAREN }
| ")"			{ RPAREN }

// Numberic constants
| digit+		{ INT32 (Int32.Parse(lexeme lexbuf)) }

//variable names
| '$'alpha+ 	{NAME (lexeme lexbuf)} //property
| '#'alpha+ 	{PATH  (lexeme lexbuf)} //experiment
| '&'alpha+ 	{CELL  (lexeme lexbuf)} //cell type



// Species 
| alpha+	{SPECIES (lexeme lexbuf)}

// EOF
| ";"	{ EOL }
| eof   { EOF }

